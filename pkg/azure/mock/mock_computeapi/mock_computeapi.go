// Code generated by MockGen. DO NOT EDIT.
// Source: /HOME/USER/go/src/github.com/gardener/machine-controller-manager-provider-azure/vendor/github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2021-12-01/compute/computeapi/interfaces.go

// Package mock_computeapi is a generated GoMock package.
package mock_computeapi

import (
	context "context"
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2021-12-01/compute"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
)

// MockOperationsClientAPI is a mock of OperationsClientAPI interface.
type MockOperationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsClientAPIMockRecorder
}

// MockOperationsClientAPIMockRecorder is the mock recorder for MockOperationsClientAPI.
type MockOperationsClientAPIMockRecorder struct {
	mock *MockOperationsClientAPI
}

// NewMockOperationsClientAPI creates a new mock instance.
func NewMockOperationsClientAPI(ctrl *gomock.Controller) *MockOperationsClientAPI {
	mock := &MockOperationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockOperationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationsClientAPI) EXPECT() *MockOperationsClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockOperationsClientAPI) List(ctx context.Context) (compute.OperationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(compute.OperationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOperationsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOperationsClientAPI)(nil).List), ctx)
}

// MockAvailabilitySetsClientAPI is a mock of AvailabilitySetsClientAPI interface.
type MockAvailabilitySetsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilitySetsClientAPIMockRecorder
}

// MockAvailabilitySetsClientAPIMockRecorder is the mock recorder for MockAvailabilitySetsClientAPI.
type MockAvailabilitySetsClientAPIMockRecorder struct {
	mock *MockAvailabilitySetsClientAPI
}

// NewMockAvailabilitySetsClientAPI creates a new mock instance.
func NewMockAvailabilitySetsClientAPI(ctrl *gomock.Controller) *MockAvailabilitySetsClientAPI {
	mock := &MockAvailabilitySetsClientAPI{ctrl: ctrl}
	mock.recorder = &MockAvailabilitySetsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilitySetsClientAPI) EXPECT() *MockAvailabilitySetsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockAvailabilitySetsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, availabilitySetName string, parameters compute.AvailabilitySet) (compute.AvailabilitySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, availabilitySetName, parameters)
	ret0, _ := ret[0].(compute.AvailabilitySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, availabilitySetName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, availabilitySetName, parameters)
}

// Delete mocks base method.
func (m *MockAvailabilitySetsClientAPI) Delete(ctx context.Context, resourceGroupName, availabilitySetName string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, availabilitySetName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) Delete(ctx, resourceGroupName, availabilitySetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).Delete), ctx, resourceGroupName, availabilitySetName)
}

// Get mocks base method.
func (m *MockAvailabilitySetsClientAPI) Get(ctx context.Context, resourceGroupName, availabilitySetName string) (compute.AvailabilitySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, availabilitySetName)
	ret0, _ := ret[0].(compute.AvailabilitySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) Get(ctx, resourceGroupName, availabilitySetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).Get), ctx, resourceGroupName, availabilitySetName)
}

// List mocks base method.
func (m *MockAvailabilitySetsClientAPI) List(ctx context.Context, resourceGroupName string) (compute.AvailabilitySetListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.AvailabilitySetListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListAvailableSizes mocks base method.
func (m *MockAvailabilitySetsClientAPI) ListAvailableSizes(ctx context.Context, resourceGroupName, availabilitySetName string) (compute.VirtualMachineSizeListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSizes", ctx, resourceGroupName, availabilitySetName)
	ret0, _ := ret[0].(compute.VirtualMachineSizeListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSizes indicates an expected call of ListAvailableSizes.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) ListAvailableSizes(ctx, resourceGroupName, availabilitySetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSizes", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).ListAvailableSizes), ctx, resourceGroupName, availabilitySetName)
}

// ListBySubscription mocks base method.
func (m *MockAvailabilitySetsClientAPI) ListBySubscription(ctx context.Context, expand string) (compute.AvailabilitySetListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx, expand)
	ret0, _ := ret[0].(compute.AvailabilitySetListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) ListBySubscription(ctx, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).ListBySubscription), ctx, expand)
}

// ListBySubscriptionComplete mocks base method.
func (m *MockAvailabilitySetsClientAPI) ListBySubscriptionComplete(ctx context.Context, expand string) (compute.AvailabilitySetListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx, expand)
	ret0, _ := ret[0].(compute.AvailabilitySetListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) ListBySubscriptionComplete(ctx, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).ListBySubscriptionComplete), ctx, expand)
}

// ListComplete mocks base method.
func (m *MockAvailabilitySetsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (compute.AvailabilitySetListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.AvailabilitySetListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// Update mocks base method.
func (m *MockAvailabilitySetsClientAPI) Update(ctx context.Context, resourceGroupName, availabilitySetName string, parameters compute.AvailabilitySetUpdate) (compute.AvailabilitySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, availabilitySetName, parameters)
	ret0, _ := ret[0].(compute.AvailabilitySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAvailabilitySetsClientAPIMockRecorder) Update(ctx, resourceGroupName, availabilitySetName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAvailabilitySetsClientAPI)(nil).Update), ctx, resourceGroupName, availabilitySetName, parameters)
}

// MockProximityPlacementGroupsClientAPI is a mock of ProximityPlacementGroupsClientAPI interface.
type MockProximityPlacementGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProximityPlacementGroupsClientAPIMockRecorder
}

// MockProximityPlacementGroupsClientAPIMockRecorder is the mock recorder for MockProximityPlacementGroupsClientAPI.
type MockProximityPlacementGroupsClientAPIMockRecorder struct {
	mock *MockProximityPlacementGroupsClientAPI
}

// NewMockProximityPlacementGroupsClientAPI creates a new mock instance.
func NewMockProximityPlacementGroupsClientAPI(ctrl *gomock.Controller) *MockProximityPlacementGroupsClientAPI {
	mock := &MockProximityPlacementGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockProximityPlacementGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProximityPlacementGroupsClientAPI) EXPECT() *MockProximityPlacementGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, proximityPlacementGroupName string, parameters compute.ProximityPlacementGroup) (compute.ProximityPlacementGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, proximityPlacementGroupName, parameters)
	ret0, _ := ret[0].(compute.ProximityPlacementGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, proximityPlacementGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, proximityPlacementGroupName, parameters)
}

// Delete mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, proximityPlacementGroupName string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, proximityPlacementGroupName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, proximityPlacementGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, proximityPlacementGroupName)
}

// Get mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) Get(ctx context.Context, resourceGroupName, proximityPlacementGroupName, includeColocationStatus string) (compute.ProximityPlacementGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, proximityPlacementGroupName, includeColocationStatus)
	ret0, _ := ret[0].(compute.ProximityPlacementGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, proximityPlacementGroupName, includeColocationStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).Get), ctx, resourceGroupName, proximityPlacementGroupName, includeColocationStatus)
}

// ListByResourceGroup mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.ProximityPlacementGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.ProximityPlacementGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.ProximityPlacementGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.ProximityPlacementGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListBySubscription mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) ListBySubscription(ctx context.Context) (compute.ProximityPlacementGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx)
	ret0, _ := ret[0].(compute.ProximityPlacementGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) ListBySubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).ListBySubscription), ctx)
}

// ListBySubscriptionComplete mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) ListBySubscriptionComplete(ctx context.Context) (compute.ProximityPlacementGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx)
	ret0, _ := ret[0].(compute.ProximityPlacementGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) ListBySubscriptionComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).ListBySubscriptionComplete), ctx)
}

// Update mocks base method.
func (m *MockProximityPlacementGroupsClientAPI) Update(ctx context.Context, resourceGroupName, proximityPlacementGroupName string, parameters compute.ProximityPlacementGroupUpdate) (compute.ProximityPlacementGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, proximityPlacementGroupName, parameters)
	ret0, _ := ret[0].(compute.ProximityPlacementGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProximityPlacementGroupsClientAPIMockRecorder) Update(ctx, resourceGroupName, proximityPlacementGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProximityPlacementGroupsClientAPI)(nil).Update), ctx, resourceGroupName, proximityPlacementGroupName, parameters)
}

// MockDedicatedHostGroupsClientAPI is a mock of DedicatedHostGroupsClientAPI interface.
type MockDedicatedHostGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDedicatedHostGroupsClientAPIMockRecorder
}

// MockDedicatedHostGroupsClientAPIMockRecorder is the mock recorder for MockDedicatedHostGroupsClientAPI.
type MockDedicatedHostGroupsClientAPIMockRecorder struct {
	mock *MockDedicatedHostGroupsClientAPI
}

// NewMockDedicatedHostGroupsClientAPI creates a new mock instance.
func NewMockDedicatedHostGroupsClientAPI(ctrl *gomock.Controller) *MockDedicatedHostGroupsClientAPI {
	mock := &MockDedicatedHostGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockDedicatedHostGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDedicatedHostGroupsClientAPI) EXPECT() *MockDedicatedHostGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, hostGroupName string, parameters compute.DedicatedHostGroup) (compute.DedicatedHostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, hostGroupName, parameters)
	ret0, _ := ret[0].(compute.DedicatedHostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, hostGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, hostGroupName, parameters)
}

// Delete mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, hostGroupName string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, hostGroupName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, hostGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, hostGroupName)
}

// Get mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) Get(ctx context.Context, resourceGroupName, hostGroupName string, expand compute.InstanceViewTypes) (compute.DedicatedHostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, hostGroupName, expand)
	ret0, _ := ret[0].(compute.DedicatedHostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, hostGroupName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).Get), ctx, resourceGroupName, hostGroupName, expand)
}

// ListByResourceGroup mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.DedicatedHostGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DedicatedHostGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.DedicatedHostGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DedicatedHostGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListBySubscription mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) ListBySubscription(ctx context.Context) (compute.DedicatedHostGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx)
	ret0, _ := ret[0].(compute.DedicatedHostGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) ListBySubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).ListBySubscription), ctx)
}

// ListBySubscriptionComplete mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) ListBySubscriptionComplete(ctx context.Context) (compute.DedicatedHostGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx)
	ret0, _ := ret[0].(compute.DedicatedHostGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) ListBySubscriptionComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).ListBySubscriptionComplete), ctx)
}

// Update mocks base method.
func (m *MockDedicatedHostGroupsClientAPI) Update(ctx context.Context, resourceGroupName, hostGroupName string, parameters compute.DedicatedHostGroupUpdate) (compute.DedicatedHostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, hostGroupName, parameters)
	ret0, _ := ret[0].(compute.DedicatedHostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDedicatedHostGroupsClientAPIMockRecorder) Update(ctx, resourceGroupName, hostGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDedicatedHostGroupsClientAPI)(nil).Update), ctx, resourceGroupName, hostGroupName, parameters)
}

// MockDedicatedHostsClientAPI is a mock of DedicatedHostsClientAPI interface.
type MockDedicatedHostsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDedicatedHostsClientAPIMockRecorder
}

// MockDedicatedHostsClientAPIMockRecorder is the mock recorder for MockDedicatedHostsClientAPI.
type MockDedicatedHostsClientAPIMockRecorder struct {
	mock *MockDedicatedHostsClientAPI
}

// NewMockDedicatedHostsClientAPI creates a new mock instance.
func NewMockDedicatedHostsClientAPI(ctrl *gomock.Controller) *MockDedicatedHostsClientAPI {
	mock := &MockDedicatedHostsClientAPI{ctrl: ctrl}
	mock.recorder = &MockDedicatedHostsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDedicatedHostsClientAPI) EXPECT() *MockDedicatedHostsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDedicatedHostsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, hostGroupName, hostName string, parameters compute.DedicatedHost) (compute.DedicatedHostsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, hostGroupName, hostName, parameters)
	ret0, _ := ret[0].(compute.DedicatedHostsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDedicatedHostsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, hostGroupName, hostName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDedicatedHostsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, hostGroupName, hostName, parameters)
}

// Delete mocks base method.
func (m *MockDedicatedHostsClientAPI) Delete(ctx context.Context, resourceGroupName, hostGroupName, hostName string) (compute.DedicatedHostsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, hostGroupName, hostName)
	ret0, _ := ret[0].(compute.DedicatedHostsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDedicatedHostsClientAPIMockRecorder) Delete(ctx, resourceGroupName, hostGroupName, hostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDedicatedHostsClientAPI)(nil).Delete), ctx, resourceGroupName, hostGroupName, hostName)
}

// Get mocks base method.
func (m *MockDedicatedHostsClientAPI) Get(ctx context.Context, resourceGroupName, hostGroupName, hostName string, expand compute.InstanceViewTypes) (compute.DedicatedHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, hostGroupName, hostName, expand)
	ret0, _ := ret[0].(compute.DedicatedHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDedicatedHostsClientAPIMockRecorder) Get(ctx, resourceGroupName, hostGroupName, hostName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDedicatedHostsClientAPI)(nil).Get), ctx, resourceGroupName, hostGroupName, hostName, expand)
}

// ListByHostGroup mocks base method.
func (m *MockDedicatedHostsClientAPI) ListByHostGroup(ctx context.Context, resourceGroupName, hostGroupName string) (compute.DedicatedHostListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByHostGroup", ctx, resourceGroupName, hostGroupName)
	ret0, _ := ret[0].(compute.DedicatedHostListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByHostGroup indicates an expected call of ListByHostGroup.
func (mr *MockDedicatedHostsClientAPIMockRecorder) ListByHostGroup(ctx, resourceGroupName, hostGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByHostGroup", reflect.TypeOf((*MockDedicatedHostsClientAPI)(nil).ListByHostGroup), ctx, resourceGroupName, hostGroupName)
}

// ListByHostGroupComplete mocks base method.
func (m *MockDedicatedHostsClientAPI) ListByHostGroupComplete(ctx context.Context, resourceGroupName, hostGroupName string) (compute.DedicatedHostListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByHostGroupComplete", ctx, resourceGroupName, hostGroupName)
	ret0, _ := ret[0].(compute.DedicatedHostListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByHostGroupComplete indicates an expected call of ListByHostGroupComplete.
func (mr *MockDedicatedHostsClientAPIMockRecorder) ListByHostGroupComplete(ctx, resourceGroupName, hostGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByHostGroupComplete", reflect.TypeOf((*MockDedicatedHostsClientAPI)(nil).ListByHostGroupComplete), ctx, resourceGroupName, hostGroupName)
}

// Restart mocks base method.
func (m *MockDedicatedHostsClientAPI) Restart(ctx context.Context, resourceGroupName, hostGroupName, hostName string) (compute.DedicatedHostsRestartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, resourceGroupName, hostGroupName, hostName)
	ret0, _ := ret[0].(compute.DedicatedHostsRestartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockDedicatedHostsClientAPIMockRecorder) Restart(ctx, resourceGroupName, hostGroupName, hostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockDedicatedHostsClientAPI)(nil).Restart), ctx, resourceGroupName, hostGroupName, hostName)
}

// Update mocks base method.
func (m *MockDedicatedHostsClientAPI) Update(ctx context.Context, resourceGroupName, hostGroupName, hostName string, parameters compute.DedicatedHostUpdate) (compute.DedicatedHostsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, hostGroupName, hostName, parameters)
	ret0, _ := ret[0].(compute.DedicatedHostsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDedicatedHostsClientAPIMockRecorder) Update(ctx, resourceGroupName, hostGroupName, hostName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDedicatedHostsClientAPI)(nil).Update), ctx, resourceGroupName, hostGroupName, hostName, parameters)
}

// MockSSHPublicKeysClientAPI is a mock of SSHPublicKeysClientAPI interface.
type MockSSHPublicKeysClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSHPublicKeysClientAPIMockRecorder
}

// MockSSHPublicKeysClientAPIMockRecorder is the mock recorder for MockSSHPublicKeysClientAPI.
type MockSSHPublicKeysClientAPIMockRecorder struct {
	mock *MockSSHPublicKeysClientAPI
}

// NewMockSSHPublicKeysClientAPI creates a new mock instance.
func NewMockSSHPublicKeysClientAPI(ctrl *gomock.Controller) *MockSSHPublicKeysClientAPI {
	mock := &MockSSHPublicKeysClientAPI{ctrl: ctrl}
	mock.recorder = &MockSSHPublicKeysClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHPublicKeysClientAPI) EXPECT() *MockSSHPublicKeysClientAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSSHPublicKeysClientAPI) Create(ctx context.Context, resourceGroupName, SSHPublicKeyName string, parameters compute.SSHPublicKeyResource) (compute.SSHPublicKeyResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resourceGroupName, SSHPublicKeyName, parameters)
	ret0, _ := ret[0].(compute.SSHPublicKeyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) Create(ctx, resourceGroupName, SSHPublicKeyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).Create), ctx, resourceGroupName, SSHPublicKeyName, parameters)
}

// Delete mocks base method.
func (m *MockSSHPublicKeysClientAPI) Delete(ctx context.Context, resourceGroupName, SSHPublicKeyName string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, SSHPublicKeyName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) Delete(ctx, resourceGroupName, SSHPublicKeyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).Delete), ctx, resourceGroupName, SSHPublicKeyName)
}

// GenerateKeyPair mocks base method.
func (m *MockSSHPublicKeysClientAPI) GenerateKeyPair(ctx context.Context, resourceGroupName, SSHPublicKeyName string) (compute.SSHPublicKeyGenerateKeyPairResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeyPair", ctx, resourceGroupName, SSHPublicKeyName)
	ret0, _ := ret[0].(compute.SSHPublicKeyGenerateKeyPairResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKeyPair indicates an expected call of GenerateKeyPair.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) GenerateKeyPair(ctx, resourceGroupName, SSHPublicKeyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyPair", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).GenerateKeyPair), ctx, resourceGroupName, SSHPublicKeyName)
}

// Get mocks base method.
func (m *MockSSHPublicKeysClientAPI) Get(ctx context.Context, resourceGroupName, SSHPublicKeyName string) (compute.SSHPublicKeyResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, SSHPublicKeyName)
	ret0, _ := ret[0].(compute.SSHPublicKeyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) Get(ctx, resourceGroupName, SSHPublicKeyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).Get), ctx, resourceGroupName, SSHPublicKeyName)
}

// ListByResourceGroup mocks base method.
func (m *MockSSHPublicKeysClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.SSHPublicKeysGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.SSHPublicKeysGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockSSHPublicKeysClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.SSHPublicKeysGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.SSHPublicKeysGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListBySubscription mocks base method.
func (m *MockSSHPublicKeysClientAPI) ListBySubscription(ctx context.Context) (compute.SSHPublicKeysGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx)
	ret0, _ := ret[0].(compute.SSHPublicKeysGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) ListBySubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).ListBySubscription), ctx)
}

// ListBySubscriptionComplete mocks base method.
func (m *MockSSHPublicKeysClientAPI) ListBySubscriptionComplete(ctx context.Context) (compute.SSHPublicKeysGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx)
	ret0, _ := ret[0].(compute.SSHPublicKeysGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) ListBySubscriptionComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).ListBySubscriptionComplete), ctx)
}

// Update mocks base method.
func (m *MockSSHPublicKeysClientAPI) Update(ctx context.Context, resourceGroupName, SSHPublicKeyName string, parameters compute.SSHPublicKeyUpdateResource) (compute.SSHPublicKeyResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, SSHPublicKeyName, parameters)
	ret0, _ := ret[0].(compute.SSHPublicKeyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSSHPublicKeysClientAPIMockRecorder) Update(ctx, resourceGroupName, SSHPublicKeyName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSSHPublicKeysClientAPI)(nil).Update), ctx, resourceGroupName, SSHPublicKeyName, parameters)
}

// MockVirtualMachineExtensionImagesClientAPI is a mock of VirtualMachineExtensionImagesClientAPI interface.
type MockVirtualMachineExtensionImagesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineExtensionImagesClientAPIMockRecorder
}

// MockVirtualMachineExtensionImagesClientAPIMockRecorder is the mock recorder for MockVirtualMachineExtensionImagesClientAPI.
type MockVirtualMachineExtensionImagesClientAPIMockRecorder struct {
	mock *MockVirtualMachineExtensionImagesClientAPI
}

// NewMockVirtualMachineExtensionImagesClientAPI creates a new mock instance.
func NewMockVirtualMachineExtensionImagesClientAPI(ctrl *gomock.Controller) *MockVirtualMachineExtensionImagesClientAPI {
	mock := &MockVirtualMachineExtensionImagesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineExtensionImagesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineExtensionImagesClientAPI) EXPECT() *MockVirtualMachineExtensionImagesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVirtualMachineExtensionImagesClientAPI) Get(ctx context.Context, location, publisherName, typeParameter, version string) (compute.VirtualMachineExtensionImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, publisherName, typeParameter, version)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineExtensionImagesClientAPIMockRecorder) Get(ctx, location, publisherName, typeParameter, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineExtensionImagesClientAPI)(nil).Get), ctx, location, publisherName, typeParameter, version)
}

// ListTypes mocks base method.
func (m *MockVirtualMachineExtensionImagesClientAPI) ListTypes(ctx context.Context, location, publisherName string) (compute.ListVirtualMachineExtensionImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypes", ctx, location, publisherName)
	ret0, _ := ret[0].(compute.ListVirtualMachineExtensionImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypes indicates an expected call of ListTypes.
func (mr *MockVirtualMachineExtensionImagesClientAPIMockRecorder) ListTypes(ctx, location, publisherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypes", reflect.TypeOf((*MockVirtualMachineExtensionImagesClientAPI)(nil).ListTypes), ctx, location, publisherName)
}

// ListVersions mocks base method.
func (m *MockVirtualMachineExtensionImagesClientAPI) ListVersions(ctx context.Context, location, publisherName, typeParameter, filter string, top *int32, orderby string) (compute.ListVirtualMachineExtensionImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions", ctx, location, publisherName, typeParameter, filter, top, orderby)
	ret0, _ := ret[0].(compute.ListVirtualMachineExtensionImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockVirtualMachineExtensionImagesClientAPIMockRecorder) ListVersions(ctx, location, publisherName, typeParameter, filter, top, orderby interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockVirtualMachineExtensionImagesClientAPI)(nil).ListVersions), ctx, location, publisherName, typeParameter, filter, top, orderby)
}

// MockVirtualMachineExtensionsClientAPI is a mock of VirtualMachineExtensionsClientAPI interface.
type MockVirtualMachineExtensionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineExtensionsClientAPIMockRecorder
}

// MockVirtualMachineExtensionsClientAPIMockRecorder is the mock recorder for MockVirtualMachineExtensionsClientAPI.
type MockVirtualMachineExtensionsClientAPIMockRecorder struct {
	mock *MockVirtualMachineExtensionsClientAPI
}

// NewMockVirtualMachineExtensionsClientAPI creates a new mock instance.
func NewMockVirtualMachineExtensionsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineExtensionsClientAPI {
	mock := &MockVirtualMachineExtensionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineExtensionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineExtensionsClientAPI) EXPECT() *MockVirtualMachineExtensionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualMachineExtensionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, VMName, VMExtensionName string, extensionParameters compute.VirtualMachineExtension) (compute.VirtualMachineExtensionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, VMName, VMExtensionName, extensionParameters)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, VMName, VMExtensionName, extensionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, VMName, VMExtensionName, extensionParameters)
}

// Delete mocks base method.
func (m *MockVirtualMachineExtensionsClientAPI) Delete(ctx context.Context, resourceGroupName, VMName, VMExtensionName string) (compute.VirtualMachineExtensionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMName, VMExtensionName)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMName, VMExtensionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).Delete), ctx, resourceGroupName, VMName, VMExtensionName)
}

// Get mocks base method.
func (m *MockVirtualMachineExtensionsClientAPI) Get(ctx context.Context, resourceGroupName, VMName, VMExtensionName, expand string) (compute.VirtualMachineExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, VMName, VMExtensionName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) Get(ctx, resourceGroupName, VMName, VMExtensionName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).Get), ctx, resourceGroupName, VMName, VMExtensionName, expand)
}

// List mocks base method.
func (m *MockVirtualMachineExtensionsClientAPI) List(ctx context.Context, resourceGroupName, VMName, expand string) (compute.VirtualMachineExtensionsListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, VMName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) List(ctx, resourceGroupName, VMName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).List), ctx, resourceGroupName, VMName, expand)
}

// Update mocks base method.
func (m *MockVirtualMachineExtensionsClientAPI) Update(ctx context.Context, resourceGroupName, VMName, VMExtensionName string, extensionParameters compute.VirtualMachineExtensionUpdate) (compute.VirtualMachineExtensionsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMName, VMExtensionName, extensionParameters)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) Update(ctx, resourceGroupName, VMName, VMExtensionName, extensionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).Update), ctx, resourceGroupName, VMName, VMExtensionName, extensionParameters)
}

// MockVirtualMachineImagesClientAPI is a mock of VirtualMachineImagesClientAPI interface.
type MockVirtualMachineImagesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineImagesClientAPIMockRecorder
}

// MockVirtualMachineImagesClientAPIMockRecorder is the mock recorder for MockVirtualMachineImagesClientAPI.
type MockVirtualMachineImagesClientAPIMockRecorder struct {
	mock *MockVirtualMachineImagesClientAPI
}

// NewMockVirtualMachineImagesClientAPI creates a new mock instance.
func NewMockVirtualMachineImagesClientAPI(ctrl *gomock.Controller) *MockVirtualMachineImagesClientAPI {
	mock := &MockVirtualMachineImagesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineImagesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineImagesClientAPI) EXPECT() *MockVirtualMachineImagesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVirtualMachineImagesClientAPI) Get(ctx context.Context, location, publisherName, offer, skus, version string) (compute.VirtualMachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, publisherName, offer, skus, version)
	ret0, _ := ret[0].(compute.VirtualMachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineImagesClientAPIMockRecorder) Get(ctx, location, publisherName, offer, skus, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineImagesClientAPI)(nil).Get), ctx, location, publisherName, offer, skus, version)
}

// List mocks base method.
func (m *MockVirtualMachineImagesClientAPI) List(ctx context.Context, location, publisherName, offer, skus, expand string, top *int32, orderby string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location, publisherName, offer, skus, expand, top, orderby)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineImagesClientAPIMockRecorder) List(ctx, location, publisherName, offer, skus, expand, top, orderby interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineImagesClientAPI)(nil).List), ctx, location, publisherName, offer, skus, expand, top, orderby)
}

// ListOffers mocks base method.
func (m *MockVirtualMachineImagesClientAPI) ListOffers(ctx context.Context, location, publisherName string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffers", ctx, location, publisherName)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOffers indicates an expected call of ListOffers.
func (mr *MockVirtualMachineImagesClientAPIMockRecorder) ListOffers(ctx, location, publisherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffers", reflect.TypeOf((*MockVirtualMachineImagesClientAPI)(nil).ListOffers), ctx, location, publisherName)
}

// ListPublishers mocks base method.
func (m *MockVirtualMachineImagesClientAPI) ListPublishers(ctx context.Context, location string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublishers", ctx, location)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublishers indicates an expected call of ListPublishers.
func (mr *MockVirtualMachineImagesClientAPIMockRecorder) ListPublishers(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishers", reflect.TypeOf((*MockVirtualMachineImagesClientAPI)(nil).ListPublishers), ctx, location)
}

// ListSkus mocks base method.
func (m *MockVirtualMachineImagesClientAPI) ListSkus(ctx context.Context, location, publisherName, offer string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkus", ctx, location, publisherName, offer)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkus indicates an expected call of ListSkus.
func (mr *MockVirtualMachineImagesClientAPIMockRecorder) ListSkus(ctx, location, publisherName, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkus", reflect.TypeOf((*MockVirtualMachineImagesClientAPI)(nil).ListSkus), ctx, location, publisherName, offer)
}

// MockVirtualMachineImagesEdgeZoneClientAPI is a mock of VirtualMachineImagesEdgeZoneClientAPI interface.
type MockVirtualMachineImagesEdgeZoneClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder
}

// MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder is the mock recorder for MockVirtualMachineImagesEdgeZoneClientAPI.
type MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder struct {
	mock *MockVirtualMachineImagesEdgeZoneClientAPI
}

// NewMockVirtualMachineImagesEdgeZoneClientAPI creates a new mock instance.
func NewMockVirtualMachineImagesEdgeZoneClientAPI(ctrl *gomock.Controller) *MockVirtualMachineImagesEdgeZoneClientAPI {
	mock := &MockVirtualMachineImagesEdgeZoneClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineImagesEdgeZoneClientAPI) EXPECT() *MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVirtualMachineImagesEdgeZoneClientAPI) Get(ctx context.Context, location, edgeZone, publisherName, offer, skus, version string) (compute.VirtualMachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, edgeZone, publisherName, offer, skus, version)
	ret0, _ := ret[0].(compute.VirtualMachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder) Get(ctx, location, edgeZone, publisherName, offer, skus, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineImagesEdgeZoneClientAPI)(nil).Get), ctx, location, edgeZone, publisherName, offer, skus, version)
}

// List mocks base method.
func (m *MockVirtualMachineImagesEdgeZoneClientAPI) List(ctx context.Context, location, edgeZone, publisherName, offer, skus, expand string, top *int32, orderby string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location, edgeZone, publisherName, offer, skus, expand, top, orderby)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder) List(ctx, location, edgeZone, publisherName, offer, skus, expand, top, orderby interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineImagesEdgeZoneClientAPI)(nil).List), ctx, location, edgeZone, publisherName, offer, skus, expand, top, orderby)
}

// ListOffers mocks base method.
func (m *MockVirtualMachineImagesEdgeZoneClientAPI) ListOffers(ctx context.Context, location, edgeZone, publisherName string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffers", ctx, location, edgeZone, publisherName)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOffers indicates an expected call of ListOffers.
func (mr *MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder) ListOffers(ctx, location, edgeZone, publisherName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffers", reflect.TypeOf((*MockVirtualMachineImagesEdgeZoneClientAPI)(nil).ListOffers), ctx, location, edgeZone, publisherName)
}

// ListPublishers mocks base method.
func (m *MockVirtualMachineImagesEdgeZoneClientAPI) ListPublishers(ctx context.Context, location, edgeZone string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublishers", ctx, location, edgeZone)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublishers indicates an expected call of ListPublishers.
func (mr *MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder) ListPublishers(ctx, location, edgeZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishers", reflect.TypeOf((*MockVirtualMachineImagesEdgeZoneClientAPI)(nil).ListPublishers), ctx, location, edgeZone)
}

// ListSkus mocks base method.
func (m *MockVirtualMachineImagesEdgeZoneClientAPI) ListSkus(ctx context.Context, location, edgeZone, publisherName, offer string) (compute.ListVirtualMachineImageResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkus", ctx, location, edgeZone, publisherName, offer)
	ret0, _ := ret[0].(compute.ListVirtualMachineImageResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkus indicates an expected call of ListSkus.
func (mr *MockVirtualMachineImagesEdgeZoneClientAPIMockRecorder) ListSkus(ctx, location, edgeZone, publisherName, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkus", reflect.TypeOf((*MockVirtualMachineImagesEdgeZoneClientAPI)(nil).ListSkus), ctx, location, edgeZone, publisherName, offer)
}

// MockUsageClientAPI is a mock of UsageClientAPI interface.
type MockUsageClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUsageClientAPIMockRecorder
}

// MockUsageClientAPIMockRecorder is the mock recorder for MockUsageClientAPI.
type MockUsageClientAPIMockRecorder struct {
	mock *MockUsageClientAPI
}

// NewMockUsageClientAPI creates a new mock instance.
func NewMockUsageClientAPI(ctrl *gomock.Controller) *MockUsageClientAPI {
	mock := &MockUsageClientAPI{ctrl: ctrl}
	mock.recorder = &MockUsageClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsageClientAPI) EXPECT() *MockUsageClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockUsageClientAPI) List(ctx context.Context, location string) (compute.ListUsagesResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(compute.ListUsagesResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUsageClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsageClientAPI)(nil).List), ctx, location)
}

// ListComplete mocks base method.
func (m *MockUsageClientAPI) ListComplete(ctx context.Context, location string) (compute.ListUsagesResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location)
	ret0, _ := ret[0].(compute.ListUsagesResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockUsageClientAPIMockRecorder) ListComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockUsageClientAPI)(nil).ListComplete), ctx, location)
}

// MockVirtualMachinesClientAPI is a mock of VirtualMachinesClientAPI interface.
type MockVirtualMachinesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachinesClientAPIMockRecorder
}

// MockVirtualMachinesClientAPIMockRecorder is the mock recorder for MockVirtualMachinesClientAPI.
type MockVirtualMachinesClientAPIMockRecorder struct {
	mock *MockVirtualMachinesClientAPI
}

// NewMockVirtualMachinesClientAPI creates a new mock instance.
func NewMockVirtualMachinesClientAPI(ctrl *gomock.Controller) *MockVirtualMachinesClientAPI {
	mock := &MockVirtualMachinesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachinesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachinesClientAPI) EXPECT() *MockVirtualMachinesClientAPIMockRecorder {
	return m.recorder
}

// AssessPatches mocks base method.
func (m *MockVirtualMachinesClientAPI) AssessPatches(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachinesAssessPatchesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssessPatches", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachinesAssessPatchesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssessPatches indicates an expected call of AssessPatches.
func (mr *MockVirtualMachinesClientAPIMockRecorder) AssessPatches(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssessPatches", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).AssessPatches), ctx, resourceGroupName, VMName)
}

// Capture mocks base method.
func (m *MockVirtualMachinesClientAPI) Capture(ctx context.Context, resourceGroupName, VMName string, parameters compute.VirtualMachineCaptureParameters) (compute.VirtualMachinesCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture", ctx, resourceGroupName, VMName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachinesCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Capture(ctx, resourceGroupName, VMName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Capture), ctx, resourceGroupName, VMName, parameters)
}

// ConvertToManagedDisks mocks base method.
func (m *MockVirtualMachinesClientAPI) ConvertToManagedDisks(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachinesConvertToManagedDisksFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToManagedDisks", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachinesConvertToManagedDisksFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToManagedDisks indicates an expected call of ConvertToManagedDisks.
func (mr *MockVirtualMachinesClientAPIMockRecorder) ConvertToManagedDisks(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToManagedDisks", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ConvertToManagedDisks), ctx, resourceGroupName, VMName)
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualMachinesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, VMName string, parameters compute.VirtualMachine) (compute.VirtualMachinesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, VMName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachinesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualMachinesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, VMName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, VMName, parameters)
}

// Deallocate mocks base method.
func (m *MockVirtualMachinesClientAPI) Deallocate(ctx context.Context, resourceGroupName, VMName string, hibernate *bool) (compute.VirtualMachinesDeallocateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", ctx, resourceGroupName, VMName, hibernate)
	ret0, _ := ret[0].(compute.VirtualMachinesDeallocateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deallocate indicates an expected call of Deallocate.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Deallocate(ctx, resourceGroupName, VMName, hibernate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Deallocate), ctx, resourceGroupName, VMName, hibernate)
}

// Delete mocks base method.
func (m *MockVirtualMachinesClientAPI) Delete(ctx context.Context, resourceGroupName, VMName string, forceDeletion *bool) (compute.VirtualMachinesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMName, forceDeletion)
	ret0, _ := ret[0].(compute.VirtualMachinesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMName, forceDeletion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Delete), ctx, resourceGroupName, VMName, forceDeletion)
}

// Generalize mocks base method.
func (m *MockVirtualMachinesClientAPI) Generalize(ctx context.Context, resourceGroupName, VMName string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generalize", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generalize indicates an expected call of Generalize.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Generalize(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generalize", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Generalize), ctx, resourceGroupName, VMName)
}

// Get mocks base method.
func (m *MockVirtualMachinesClientAPI) Get(ctx context.Context, resourceGroupName, VMName string, expand compute.InstanceViewTypes) (compute.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, VMName, expand)
	ret0, _ := ret[0].(compute.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Get(ctx, resourceGroupName, VMName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Get), ctx, resourceGroupName, VMName, expand)
}

// InstallPatches mocks base method.
func (m *MockVirtualMachinesClientAPI) InstallPatches(ctx context.Context, resourceGroupName, VMName string, installPatchesInput compute.VirtualMachineInstallPatchesParameters) (compute.VirtualMachinesInstallPatchesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPatches", ctx, resourceGroupName, VMName, installPatchesInput)
	ret0, _ := ret[0].(compute.VirtualMachinesInstallPatchesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallPatches indicates an expected call of InstallPatches.
func (mr *MockVirtualMachinesClientAPIMockRecorder) InstallPatches(ctx, resourceGroupName, VMName, installPatchesInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPatches", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).InstallPatches), ctx, resourceGroupName, VMName, installPatchesInput)
}

// InstanceView mocks base method.
func (m *MockVirtualMachinesClientAPI) InstanceView(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachineInstanceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceView", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachineInstanceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceView indicates an expected call of InstanceView.
func (mr *MockVirtualMachinesClientAPIMockRecorder) InstanceView(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceView", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).InstanceView), ctx, resourceGroupName, VMName)
}

// List mocks base method.
func (m *MockVirtualMachinesClientAPI) List(ctx context.Context, resourceGroupName, filter string) (compute.VirtualMachineListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, filter)
	ret0, _ := ret[0].(compute.VirtualMachineListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachinesClientAPIMockRecorder) List(ctx, resourceGroupName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).List), ctx, resourceGroupName, filter)
}

// ListAll mocks base method.
func (m *MockVirtualMachinesClientAPI) ListAll(ctx context.Context, statusOnly, filter string) (compute.VirtualMachineListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, statusOnly, filter)
	ret0, _ := ret[0].(compute.VirtualMachineListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListAll(ctx, statusOnly, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListAll), ctx, statusOnly, filter)
}

// ListAllComplete mocks base method.
func (m *MockVirtualMachinesClientAPI) ListAllComplete(ctx context.Context, statusOnly, filter string) (compute.VirtualMachineListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx, statusOnly, filter)
	ret0, _ := ret[0].(compute.VirtualMachineListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete.
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListAllComplete(ctx, statusOnly, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListAllComplete), ctx, statusOnly, filter)
}

// ListAvailableSizes mocks base method.
func (m *MockVirtualMachinesClientAPI) ListAvailableSizes(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachineSizeListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSizes", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachineSizeListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSizes indicates an expected call of ListAvailableSizes.
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListAvailableSizes(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSizes", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListAvailableSizes), ctx, resourceGroupName, VMName)
}

// ListByLocation mocks base method.
func (m *MockVirtualMachinesClientAPI) ListByLocation(ctx context.Context, location string) (compute.VirtualMachineListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLocation", ctx, location)
	ret0, _ := ret[0].(compute.VirtualMachineListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLocation indicates an expected call of ListByLocation.
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListByLocation(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLocation", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListByLocation), ctx, location)
}

// ListByLocationComplete mocks base method.
func (m *MockVirtualMachinesClientAPI) ListByLocationComplete(ctx context.Context, location string) (compute.VirtualMachineListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLocationComplete", ctx, location)
	ret0, _ := ret[0].(compute.VirtualMachineListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLocationComplete indicates an expected call of ListByLocationComplete.
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListByLocationComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLocationComplete", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListByLocationComplete), ctx, location)
}

// ListComplete mocks base method.
func (m *MockVirtualMachinesClientAPI) ListComplete(ctx context.Context, resourceGroupName, filter string) (compute.VirtualMachineListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, filter)
	ret0, _ := ret[0].(compute.VirtualMachineListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListComplete), ctx, resourceGroupName, filter)
}

// PerformMaintenance mocks base method.
func (m *MockVirtualMachinesClientAPI) PerformMaintenance(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachinesPerformMaintenanceFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformMaintenance", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachinesPerformMaintenanceFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformMaintenance indicates an expected call of PerformMaintenance.
func (mr *MockVirtualMachinesClientAPIMockRecorder) PerformMaintenance(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformMaintenance", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).PerformMaintenance), ctx, resourceGroupName, VMName)
}

// PowerOff mocks base method.
func (m *MockVirtualMachinesClientAPI) PowerOff(ctx context.Context, resourceGroupName, VMName string, skipShutdown *bool) (compute.VirtualMachinesPowerOffFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", ctx, resourceGroupName, VMName, skipShutdown)
	ret0, _ := ret[0].(compute.VirtualMachinesPowerOffFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockVirtualMachinesClientAPIMockRecorder) PowerOff(ctx, resourceGroupName, VMName, skipShutdown interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).PowerOff), ctx, resourceGroupName, VMName, skipShutdown)
}

// Reapply mocks base method.
func (m *MockVirtualMachinesClientAPI) Reapply(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachinesReapplyFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reapply", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachinesReapplyFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reapply indicates an expected call of Reapply.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Reapply(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reapply", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Reapply), ctx, resourceGroupName, VMName)
}

// Redeploy mocks base method.
func (m *MockVirtualMachinesClientAPI) Redeploy(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachinesRedeployFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redeploy", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachinesRedeployFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redeploy indicates an expected call of Redeploy.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Redeploy(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redeploy", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Redeploy), ctx, resourceGroupName, VMName)
}

// Reimage mocks base method.
func (m *MockVirtualMachinesClientAPI) Reimage(ctx context.Context, resourceGroupName, VMName string, parameters *compute.VirtualMachineReimageParameters) (compute.VirtualMachinesReimageFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", ctx, resourceGroupName, VMName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachinesReimageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reimage indicates an expected call of Reimage.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Reimage(ctx, resourceGroupName, VMName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Reimage), ctx, resourceGroupName, VMName, parameters)
}

// Restart mocks base method.
func (m *MockVirtualMachinesClientAPI) Restart(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachinesRestartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachinesRestartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Restart(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Restart), ctx, resourceGroupName, VMName)
}

// RetrieveBootDiagnosticsData mocks base method.
func (m *MockVirtualMachinesClientAPI) RetrieveBootDiagnosticsData(ctx context.Context, resourceGroupName, VMName string, sasURIExpirationTimeInMinutes *int32) (compute.RetrieveBootDiagnosticsDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBootDiagnosticsData", ctx, resourceGroupName, VMName, sasURIExpirationTimeInMinutes)
	ret0, _ := ret[0].(compute.RetrieveBootDiagnosticsDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveBootDiagnosticsData indicates an expected call of RetrieveBootDiagnosticsData.
func (mr *MockVirtualMachinesClientAPIMockRecorder) RetrieveBootDiagnosticsData(ctx, resourceGroupName, VMName, sasURIExpirationTimeInMinutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBootDiagnosticsData", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).RetrieveBootDiagnosticsData), ctx, resourceGroupName, VMName, sasURIExpirationTimeInMinutes)
}

// RunCommand mocks base method.
func (m *MockVirtualMachinesClientAPI) RunCommand(ctx context.Context, resourceGroupName, VMName string, parameters compute.RunCommandInput) (compute.VirtualMachinesRunCommandFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", ctx, resourceGroupName, VMName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachinesRunCommandFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockVirtualMachinesClientAPIMockRecorder) RunCommand(ctx, resourceGroupName, VMName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).RunCommand), ctx, resourceGroupName, VMName, parameters)
}

// SimulateEviction mocks base method.
func (m *MockVirtualMachinesClientAPI) SimulateEviction(ctx context.Context, resourceGroupName, VMName string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulateEviction", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulateEviction indicates an expected call of SimulateEviction.
func (mr *MockVirtualMachinesClientAPIMockRecorder) SimulateEviction(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateEviction", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).SimulateEviction), ctx, resourceGroupName, VMName)
}

// Start mocks base method.
func (m *MockVirtualMachinesClientAPI) Start(ctx context.Context, resourceGroupName, VMName string) (compute.VirtualMachinesStartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, resourceGroupName, VMName)
	ret0, _ := ret[0].(compute.VirtualMachinesStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Start(ctx, resourceGroupName, VMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Start), ctx, resourceGroupName, VMName)
}

// Update mocks base method.
func (m *MockVirtualMachinesClientAPI) Update(ctx context.Context, resourceGroupName, VMName string, parameters compute.VirtualMachineUpdate) (compute.VirtualMachinesUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachinesUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachinesClientAPIMockRecorder) Update(ctx, resourceGroupName, VMName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Update), ctx, resourceGroupName, VMName, parameters)
}

// MockVirtualMachineScaleSetsClientAPI is a mock of VirtualMachineScaleSetsClientAPI interface.
type MockVirtualMachineScaleSetsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetsClientAPIMockRecorder
}

// MockVirtualMachineScaleSetsClientAPIMockRecorder is the mock recorder for MockVirtualMachineScaleSetsClientAPI.
type MockVirtualMachineScaleSetsClientAPIMockRecorder struct {
	mock *MockVirtualMachineScaleSetsClientAPI
}

// NewMockVirtualMachineScaleSetsClientAPI creates a new mock instance.
func NewMockVirtualMachineScaleSetsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineScaleSetsClientAPI {
	mock := &MockVirtualMachineScaleSetsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineScaleSetsClientAPI) EXPECT() *MockVirtualMachineScaleSetsClientAPIMockRecorder {
	return m.recorder
}

// ConvertToSinglePlacementGroup mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ConvertToSinglePlacementGroup(ctx context.Context, resourceGroupName, VMScaleSetName string, parameters compute.VMScaleSetConvertToSinglePlacementGroupInput) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToSinglePlacementGroup", ctx, resourceGroupName, VMScaleSetName, parameters)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToSinglePlacementGroup indicates an expected call of ConvertToSinglePlacementGroup.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ConvertToSinglePlacementGroup(ctx, resourceGroupName, VMScaleSetName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToSinglePlacementGroup", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ConvertToSinglePlacementGroup), ctx, resourceGroupName, VMScaleSetName, parameters)
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, VMScaleSetName string, parameters compute.VirtualMachineScaleSet) (compute.VirtualMachineScaleSetsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, VMScaleSetName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, VMScaleSetName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, VMScaleSetName, parameters)
}

// Deallocate mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Deallocate(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs *compute.VirtualMachineScaleSetVMInstanceIDs) (compute.VirtualMachineScaleSetsDeallocateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsDeallocateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deallocate indicates an expected call of Deallocate.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Deallocate(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Deallocate), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// Delete mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Delete(ctx context.Context, resourceGroupName, VMScaleSetName string, forceDeletion *bool) (compute.VirtualMachineScaleSetsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMScaleSetName, forceDeletion)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMScaleSetName, forceDeletion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Delete), ctx, resourceGroupName, VMScaleSetName, forceDeletion)
}

// DeleteInstances mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) DeleteInstances(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs compute.VirtualMachineScaleSetVMInstanceRequiredIDs, forceDeletion *bool) (compute.VirtualMachineScaleSetsDeleteInstancesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstances", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs, forceDeletion)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsDeleteInstancesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstances indicates an expected call of DeleteInstances.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) DeleteInstances(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs, forceDeletion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstances", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).DeleteInstances), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs, forceDeletion)
}

// ForceRecoveryServiceFabricPlatformUpdateDomainWalk mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ForceRecoveryServiceFabricPlatformUpdateDomainWalk(ctx context.Context, resourceGroupName, VMScaleSetName string, platformUpdateDomain int32, zone, placementGroupID string) (compute.RecoveryWalkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceRecoveryServiceFabricPlatformUpdateDomainWalk", ctx, resourceGroupName, VMScaleSetName, platformUpdateDomain, zone, placementGroupID)
	ret0, _ := ret[0].(compute.RecoveryWalkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceRecoveryServiceFabricPlatformUpdateDomainWalk indicates an expected call of ForceRecoveryServiceFabricPlatformUpdateDomainWalk.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ForceRecoveryServiceFabricPlatformUpdateDomainWalk(ctx, resourceGroupName, VMScaleSetName, platformUpdateDomain, zone, placementGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceRecoveryServiceFabricPlatformUpdateDomainWalk", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ForceRecoveryServiceFabricPlatformUpdateDomainWalk), ctx, resourceGroupName, VMScaleSetName, platformUpdateDomain, zone, placementGroupID)
}

// Get mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Get(ctx context.Context, resourceGroupName, VMScaleSetName string, expand compute.ExpandTypesForGetVMScaleSets) (compute.VirtualMachineScaleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, VMScaleSetName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Get(ctx, resourceGroupName, VMScaleSetName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Get), ctx, resourceGroupName, VMScaleSetName, expand)
}

// GetInstanceView mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) GetInstanceView(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetInstanceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceView", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetInstanceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceView indicates an expected call of GetInstanceView.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) GetInstanceView(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceView", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).GetInstanceView), ctx, resourceGroupName, VMScaleSetName)
}

// GetOSUpgradeHistory mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) GetOSUpgradeHistory(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetListOSUpgradeHistoryPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSUpgradeHistory", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListOSUpgradeHistoryPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSUpgradeHistory indicates an expected call of GetOSUpgradeHistory.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) GetOSUpgradeHistory(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSUpgradeHistory", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).GetOSUpgradeHistory), ctx, resourceGroupName, VMScaleSetName)
}

// GetOSUpgradeHistoryComplete mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) GetOSUpgradeHistoryComplete(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetListOSUpgradeHistoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSUpgradeHistoryComplete", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListOSUpgradeHistoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSUpgradeHistoryComplete indicates an expected call of GetOSUpgradeHistoryComplete.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) GetOSUpgradeHistoryComplete(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSUpgradeHistoryComplete", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).GetOSUpgradeHistoryComplete), ctx, resourceGroupName, VMScaleSetName)
}

// List mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) List(ctx context.Context, resourceGroupName string) (compute.VirtualMachineScaleSetListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListAll mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ListAll(ctx context.Context) (compute.VirtualMachineScaleSetListWithLinkResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListWithLinkResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ListAllComplete(ctx context.Context) (compute.VirtualMachineScaleSetListWithLinkResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListWithLinkResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ListAllComplete), ctx)
}

// ListByLocation mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ListByLocation(ctx context.Context, location string) (compute.VirtualMachineScaleSetListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLocation", ctx, location)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLocation indicates an expected call of ListByLocation.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ListByLocation(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLocation", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ListByLocation), ctx, location)
}

// ListByLocationComplete mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ListByLocationComplete(ctx context.Context, location string) (compute.VirtualMachineScaleSetListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLocationComplete", ctx, location)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLocationComplete indicates an expected call of ListByLocationComplete.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ListByLocationComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLocationComplete", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ListByLocationComplete), ctx, location)
}

// ListComplete mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (compute.VirtualMachineScaleSetListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// ListSkus mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ListSkus(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetListSkusResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkus", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListSkusResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkus indicates an expected call of ListSkus.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ListSkus(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkus", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ListSkus), ctx, resourceGroupName, VMScaleSetName)
}

// ListSkusComplete mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ListSkusComplete(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetListSkusResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkusComplete", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetListSkusResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkusComplete indicates an expected call of ListSkusComplete.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ListSkusComplete(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkusComplete", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ListSkusComplete), ctx, resourceGroupName, VMScaleSetName)
}

// PerformMaintenance mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) PerformMaintenance(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs *compute.VirtualMachineScaleSetVMInstanceIDs) (compute.VirtualMachineScaleSetsPerformMaintenanceFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformMaintenance", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsPerformMaintenanceFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformMaintenance indicates an expected call of PerformMaintenance.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) PerformMaintenance(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformMaintenance", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).PerformMaintenance), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// PowerOff mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) PowerOff(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs *compute.VirtualMachineScaleSetVMInstanceIDs, skipShutdown *bool) (compute.VirtualMachineScaleSetsPowerOffFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs, skipShutdown)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsPowerOffFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) PowerOff(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs, skipShutdown interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).PowerOff), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs, skipShutdown)
}

// Redeploy mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Redeploy(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs *compute.VirtualMachineScaleSetVMInstanceIDs) (compute.VirtualMachineScaleSetsRedeployFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redeploy", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsRedeployFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redeploy indicates an expected call of Redeploy.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Redeploy(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redeploy", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Redeploy), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// Reimage mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Reimage(ctx context.Context, resourceGroupName, VMScaleSetName string, VMScaleSetReimageInput *compute.VirtualMachineScaleSetReimageParameters) (compute.VirtualMachineScaleSetsReimageFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", ctx, resourceGroupName, VMScaleSetName, VMScaleSetReimageInput)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsReimageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reimage indicates an expected call of Reimage.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Reimage(ctx, resourceGroupName, VMScaleSetName, VMScaleSetReimageInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Reimage), ctx, resourceGroupName, VMScaleSetName, VMScaleSetReimageInput)
}

// ReimageAll mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) ReimageAll(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs *compute.VirtualMachineScaleSetVMInstanceIDs) (compute.VirtualMachineScaleSetsReimageAllFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReimageAll", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsReimageAllFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReimageAll indicates an expected call of ReimageAll.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) ReimageAll(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReimageAll", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).ReimageAll), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// Restart mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Restart(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs *compute.VirtualMachineScaleSetVMInstanceIDs) (compute.VirtualMachineScaleSetsRestartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsRestartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Restart(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Restart), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// SetOrchestrationServiceState mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) SetOrchestrationServiceState(ctx context.Context, resourceGroupName, VMScaleSetName string, parameters compute.OrchestrationServiceStateInput) (compute.VirtualMachineScaleSetsSetOrchestrationServiceStateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrchestrationServiceState", ctx, resourceGroupName, VMScaleSetName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsSetOrchestrationServiceStateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrchestrationServiceState indicates an expected call of SetOrchestrationServiceState.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) SetOrchestrationServiceState(ctx, resourceGroupName, VMScaleSetName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrchestrationServiceState", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).SetOrchestrationServiceState), ctx, resourceGroupName, VMScaleSetName, parameters)
}

// Start mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Start(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs *compute.VirtualMachineScaleSetVMInstanceIDs) (compute.VirtualMachineScaleSetsStartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Start(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Start), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// Update mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) Update(ctx context.Context, resourceGroupName, VMScaleSetName string, parameters compute.VirtualMachineScaleSetUpdate) (compute.VirtualMachineScaleSetsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMScaleSetName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) Update(ctx, resourceGroupName, VMScaleSetName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).Update), ctx, resourceGroupName, VMScaleSetName, parameters)
}

// UpdateInstances mocks base method.
func (m *MockVirtualMachineScaleSetsClientAPI) UpdateInstances(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs compute.VirtualMachineScaleSetVMInstanceRequiredIDs) (compute.VirtualMachineScaleSetsUpdateInstancesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstances", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsUpdateInstancesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstances indicates an expected call of UpdateInstances.
func (mr *MockVirtualMachineScaleSetsClientAPIMockRecorder) UpdateInstances(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstances", reflect.TypeOf((*MockVirtualMachineScaleSetsClientAPI)(nil).UpdateInstances), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// MockVirtualMachineSizesClientAPI is a mock of VirtualMachineSizesClientAPI interface.
type MockVirtualMachineSizesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineSizesClientAPIMockRecorder
}

// MockVirtualMachineSizesClientAPIMockRecorder is the mock recorder for MockVirtualMachineSizesClientAPI.
type MockVirtualMachineSizesClientAPIMockRecorder struct {
	mock *MockVirtualMachineSizesClientAPI
}

// NewMockVirtualMachineSizesClientAPI creates a new mock instance.
func NewMockVirtualMachineSizesClientAPI(ctrl *gomock.Controller) *MockVirtualMachineSizesClientAPI {
	mock := &MockVirtualMachineSizesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineSizesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineSizesClientAPI) EXPECT() *MockVirtualMachineSizesClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockVirtualMachineSizesClientAPI) List(ctx context.Context, location string) (compute.VirtualMachineSizeListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(compute.VirtualMachineSizeListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineSizesClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineSizesClientAPI)(nil).List), ctx, location)
}

// MockImagesClientAPI is a mock of ImagesClientAPI interface.
type MockImagesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockImagesClientAPIMockRecorder
}

// MockImagesClientAPIMockRecorder is the mock recorder for MockImagesClientAPI.
type MockImagesClientAPIMockRecorder struct {
	mock *MockImagesClientAPI
}

// NewMockImagesClientAPI creates a new mock instance.
func NewMockImagesClientAPI(ctrl *gomock.Controller) *MockImagesClientAPI {
	mock := &MockImagesClientAPI{ctrl: ctrl}
	mock.recorder = &MockImagesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesClientAPI) EXPECT() *MockImagesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockImagesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, imageName string, parameters compute.Image) (compute.ImagesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, imageName, parameters)
	ret0, _ := ret[0].(compute.ImagesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockImagesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, imageName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockImagesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, imageName, parameters)
}

// Delete mocks base method.
func (m *MockImagesClientAPI) Delete(ctx context.Context, resourceGroupName, imageName string) (compute.ImagesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, imageName)
	ret0, _ := ret[0].(compute.ImagesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockImagesClientAPIMockRecorder) Delete(ctx, resourceGroupName, imageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImagesClientAPI)(nil).Delete), ctx, resourceGroupName, imageName)
}

// Get mocks base method.
func (m *MockImagesClientAPI) Get(ctx context.Context, resourceGroupName, imageName, expand string) (compute.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, imageName, expand)
	ret0, _ := ret[0].(compute.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImagesClientAPIMockRecorder) Get(ctx, resourceGroupName, imageName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImagesClientAPI)(nil).Get), ctx, resourceGroupName, imageName, expand)
}

// List mocks base method.
func (m *MockImagesClientAPI) List(ctx context.Context) (compute.ImageListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(compute.ImageListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockImagesClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockImagesClientAPI)(nil).List), ctx)
}

// ListByResourceGroup mocks base method.
func (m *MockImagesClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.ImageListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.ImageListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockImagesClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockImagesClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockImagesClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.ImageListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.ImageListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockImagesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockImagesClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListComplete mocks base method.
func (m *MockImagesClientAPI) ListComplete(ctx context.Context) (compute.ImageListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(compute.ImageListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockImagesClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockImagesClientAPI)(nil).ListComplete), ctx)
}

// Update mocks base method.
func (m *MockImagesClientAPI) Update(ctx context.Context, resourceGroupName, imageName string, parameters compute.ImageUpdate) (compute.ImagesUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, imageName, parameters)
	ret0, _ := ret[0].(compute.ImagesUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockImagesClientAPIMockRecorder) Update(ctx, resourceGroupName, imageName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImagesClientAPI)(nil).Update), ctx, resourceGroupName, imageName, parameters)
}

// MockRestorePointCollectionsClientAPI is a mock of RestorePointCollectionsClientAPI interface.
type MockRestorePointCollectionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRestorePointCollectionsClientAPIMockRecorder
}

// MockRestorePointCollectionsClientAPIMockRecorder is the mock recorder for MockRestorePointCollectionsClientAPI.
type MockRestorePointCollectionsClientAPIMockRecorder struct {
	mock *MockRestorePointCollectionsClientAPI
}

// NewMockRestorePointCollectionsClientAPI creates a new mock instance.
func NewMockRestorePointCollectionsClientAPI(ctrl *gomock.Controller) *MockRestorePointCollectionsClientAPI {
	mock := &MockRestorePointCollectionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockRestorePointCollectionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestorePointCollectionsClientAPI) EXPECT() *MockRestorePointCollectionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockRestorePointCollectionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, restorePointCollectionName string, parameters compute.RestorePointCollection) (compute.RestorePointCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, restorePointCollectionName, parameters)
	ret0, _ := ret[0].(compute.RestorePointCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, restorePointCollectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, restorePointCollectionName, parameters)
}

// Delete mocks base method.
func (m *MockRestorePointCollectionsClientAPI) Delete(ctx context.Context, resourceGroupName, restorePointCollectionName string) (compute.RestorePointCollectionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, restorePointCollectionName)
	ret0, _ := ret[0].(compute.RestorePointCollectionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, restorePointCollectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).Delete), ctx, resourceGroupName, restorePointCollectionName)
}

// Get mocks base method.
func (m *MockRestorePointCollectionsClientAPI) Get(ctx context.Context, resourceGroupName, restorePointCollectionName string, expand compute.RestorePointCollectionExpandOptions) (compute.RestorePointCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, restorePointCollectionName, expand)
	ret0, _ := ret[0].(compute.RestorePointCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) Get(ctx, resourceGroupName, restorePointCollectionName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).Get), ctx, resourceGroupName, restorePointCollectionName, expand)
}

// List mocks base method.
func (m *MockRestorePointCollectionsClientAPI) List(ctx context.Context, resourceGroupName string) (compute.RestorePointCollectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.RestorePointCollectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListAll mocks base method.
func (m *MockRestorePointCollectionsClientAPI) ListAll(ctx context.Context) (compute.RestorePointCollectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(compute.RestorePointCollectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method.
func (m *MockRestorePointCollectionsClientAPI) ListAllComplete(ctx context.Context) (compute.RestorePointCollectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(compute.RestorePointCollectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).ListAllComplete), ctx)
}

// ListComplete mocks base method.
func (m *MockRestorePointCollectionsClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (compute.RestorePointCollectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.RestorePointCollectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// Update mocks base method.
func (m *MockRestorePointCollectionsClientAPI) Update(ctx context.Context, resourceGroupName, restorePointCollectionName string, parameters compute.RestorePointCollectionUpdate) (compute.RestorePointCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, restorePointCollectionName, parameters)
	ret0, _ := ret[0].(compute.RestorePointCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRestorePointCollectionsClientAPIMockRecorder) Update(ctx, resourceGroupName, restorePointCollectionName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRestorePointCollectionsClientAPI)(nil).Update), ctx, resourceGroupName, restorePointCollectionName, parameters)
}

// MockRestorePointsClientAPI is a mock of RestorePointsClientAPI interface.
type MockRestorePointsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRestorePointsClientAPIMockRecorder
}

// MockRestorePointsClientAPIMockRecorder is the mock recorder for MockRestorePointsClientAPI.
type MockRestorePointsClientAPIMockRecorder struct {
	mock *MockRestorePointsClientAPI
}

// NewMockRestorePointsClientAPI creates a new mock instance.
func NewMockRestorePointsClientAPI(ctrl *gomock.Controller) *MockRestorePointsClientAPI {
	mock := &MockRestorePointsClientAPI{ctrl: ctrl}
	mock.recorder = &MockRestorePointsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestorePointsClientAPI) EXPECT() *MockRestorePointsClientAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRestorePointsClientAPI) Create(ctx context.Context, resourceGroupName, restorePointCollectionName, restorePointName string, parameters compute.RestorePoint) (compute.RestorePointsCreateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resourceGroupName, restorePointCollectionName, restorePointName, parameters)
	ret0, _ := ret[0].(compute.RestorePointsCreateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRestorePointsClientAPIMockRecorder) Create(ctx, resourceGroupName, restorePointCollectionName, restorePointName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRestorePointsClientAPI)(nil).Create), ctx, resourceGroupName, restorePointCollectionName, restorePointName, parameters)
}

// Delete mocks base method.
func (m *MockRestorePointsClientAPI) Delete(ctx context.Context, resourceGroupName, restorePointCollectionName, restorePointName string) (compute.RestorePointsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, restorePointCollectionName, restorePointName)
	ret0, _ := ret[0].(compute.RestorePointsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRestorePointsClientAPIMockRecorder) Delete(ctx, resourceGroupName, restorePointCollectionName, restorePointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestorePointsClientAPI)(nil).Delete), ctx, resourceGroupName, restorePointCollectionName, restorePointName)
}

// Get mocks base method.
func (m *MockRestorePointsClientAPI) Get(ctx context.Context, resourceGroupName, restorePointCollectionName, restorePointName string, expand compute.RestorePointExpandOptions) (compute.RestorePoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, restorePointCollectionName, restorePointName, expand)
	ret0, _ := ret[0].(compute.RestorePoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRestorePointsClientAPIMockRecorder) Get(ctx, resourceGroupName, restorePointCollectionName, restorePointName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestorePointsClientAPI)(nil).Get), ctx, resourceGroupName, restorePointCollectionName, restorePointName, expand)
}

// MockCapacityReservationGroupsClientAPI is a mock of CapacityReservationGroupsClientAPI interface.
type MockCapacityReservationGroupsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCapacityReservationGroupsClientAPIMockRecorder
}

// MockCapacityReservationGroupsClientAPIMockRecorder is the mock recorder for MockCapacityReservationGroupsClientAPI.
type MockCapacityReservationGroupsClientAPIMockRecorder struct {
	mock *MockCapacityReservationGroupsClientAPI
}

// NewMockCapacityReservationGroupsClientAPI creates a new mock instance.
func NewMockCapacityReservationGroupsClientAPI(ctrl *gomock.Controller) *MockCapacityReservationGroupsClientAPI {
	mock := &MockCapacityReservationGroupsClientAPI{ctrl: ctrl}
	mock.recorder = &MockCapacityReservationGroupsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapacityReservationGroupsClientAPI) EXPECT() *MockCapacityReservationGroupsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, capacityReservationGroupName string, parameters compute.CapacityReservationGroup) (compute.CapacityReservationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, capacityReservationGroupName, parameters)
	ret0, _ := ret[0].(compute.CapacityReservationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, capacityReservationGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, capacityReservationGroupName, parameters)
}

// Delete mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) Delete(ctx context.Context, resourceGroupName, capacityReservationGroupName string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, capacityReservationGroupName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) Delete(ctx, resourceGroupName, capacityReservationGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).Delete), ctx, resourceGroupName, capacityReservationGroupName)
}

// Get mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) Get(ctx context.Context, resourceGroupName, capacityReservationGroupName string, expand compute.CapacityReservationGroupInstanceViewTypes) (compute.CapacityReservationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, capacityReservationGroupName, expand)
	ret0, _ := ret[0].(compute.CapacityReservationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) Get(ctx, resourceGroupName, capacityReservationGroupName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).Get), ctx, resourceGroupName, capacityReservationGroupName, expand)
}

// ListByResourceGroup mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string, expand compute.ExpandTypesForGetCapacityReservationGroups) (compute.CapacityReservationGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName, expand)
	ret0, _ := ret[0].(compute.CapacityReservationGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName, expand)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string, expand compute.ExpandTypesForGetCapacityReservationGroups) (compute.CapacityReservationGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName, expand)
	ret0, _ := ret[0].(compute.CapacityReservationGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName, expand)
}

// ListBySubscription mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) ListBySubscription(ctx context.Context, expand compute.ExpandTypesForGetCapacityReservationGroups) (compute.CapacityReservationGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", ctx, expand)
	ret0, _ := ret[0].(compute.CapacityReservationGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) ListBySubscription(ctx, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).ListBySubscription), ctx, expand)
}

// ListBySubscriptionComplete mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) ListBySubscriptionComplete(ctx context.Context, expand compute.ExpandTypesForGetCapacityReservationGroups) (compute.CapacityReservationGroupListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscriptionComplete", ctx, expand)
	ret0, _ := ret[0].(compute.CapacityReservationGroupListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscriptionComplete indicates an expected call of ListBySubscriptionComplete.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) ListBySubscriptionComplete(ctx, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscriptionComplete", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).ListBySubscriptionComplete), ctx, expand)
}

// Update mocks base method.
func (m *MockCapacityReservationGroupsClientAPI) Update(ctx context.Context, resourceGroupName, capacityReservationGroupName string, parameters compute.CapacityReservationGroupUpdate) (compute.CapacityReservationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, capacityReservationGroupName, parameters)
	ret0, _ := ret[0].(compute.CapacityReservationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCapacityReservationGroupsClientAPIMockRecorder) Update(ctx, resourceGroupName, capacityReservationGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCapacityReservationGroupsClientAPI)(nil).Update), ctx, resourceGroupName, capacityReservationGroupName, parameters)
}

// MockCapacityReservationsClientAPI is a mock of CapacityReservationsClientAPI interface.
type MockCapacityReservationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCapacityReservationsClientAPIMockRecorder
}

// MockCapacityReservationsClientAPIMockRecorder is the mock recorder for MockCapacityReservationsClientAPI.
type MockCapacityReservationsClientAPIMockRecorder struct {
	mock *MockCapacityReservationsClientAPI
}

// NewMockCapacityReservationsClientAPI creates a new mock instance.
func NewMockCapacityReservationsClientAPI(ctrl *gomock.Controller) *MockCapacityReservationsClientAPI {
	mock := &MockCapacityReservationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockCapacityReservationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapacityReservationsClientAPI) EXPECT() *MockCapacityReservationsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockCapacityReservationsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, capacityReservationGroupName, capacityReservationName string, parameters compute.CapacityReservation) (compute.CapacityReservationsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters)
	ret0, _ := ret[0].(compute.CapacityReservationsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockCapacityReservationsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockCapacityReservationsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters)
}

// Delete mocks base method.
func (m *MockCapacityReservationsClientAPI) Delete(ctx context.Context, resourceGroupName, capacityReservationGroupName, capacityReservationName string) (compute.CapacityReservationsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName)
	ret0, _ := ret[0].(compute.CapacityReservationsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCapacityReservationsClientAPIMockRecorder) Delete(ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCapacityReservationsClientAPI)(nil).Delete), ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName)
}

// Get mocks base method.
func (m *MockCapacityReservationsClientAPI) Get(ctx context.Context, resourceGroupName, capacityReservationGroupName, capacityReservationName string, expand compute.CapacityReservationInstanceViewTypes) (compute.CapacityReservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, expand)
	ret0, _ := ret[0].(compute.CapacityReservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCapacityReservationsClientAPIMockRecorder) Get(ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCapacityReservationsClientAPI)(nil).Get), ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, expand)
}

// ListByCapacityReservationGroup mocks base method.
func (m *MockCapacityReservationsClientAPI) ListByCapacityReservationGroup(ctx context.Context, resourceGroupName, capacityReservationGroupName string) (compute.CapacityReservationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCapacityReservationGroup", ctx, resourceGroupName, capacityReservationGroupName)
	ret0, _ := ret[0].(compute.CapacityReservationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCapacityReservationGroup indicates an expected call of ListByCapacityReservationGroup.
func (mr *MockCapacityReservationsClientAPIMockRecorder) ListByCapacityReservationGroup(ctx, resourceGroupName, capacityReservationGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCapacityReservationGroup", reflect.TypeOf((*MockCapacityReservationsClientAPI)(nil).ListByCapacityReservationGroup), ctx, resourceGroupName, capacityReservationGroupName)
}

// ListByCapacityReservationGroupComplete mocks base method.
func (m *MockCapacityReservationsClientAPI) ListByCapacityReservationGroupComplete(ctx context.Context, resourceGroupName, capacityReservationGroupName string) (compute.CapacityReservationListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCapacityReservationGroupComplete", ctx, resourceGroupName, capacityReservationGroupName)
	ret0, _ := ret[0].(compute.CapacityReservationListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCapacityReservationGroupComplete indicates an expected call of ListByCapacityReservationGroupComplete.
func (mr *MockCapacityReservationsClientAPIMockRecorder) ListByCapacityReservationGroupComplete(ctx, resourceGroupName, capacityReservationGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCapacityReservationGroupComplete", reflect.TypeOf((*MockCapacityReservationsClientAPI)(nil).ListByCapacityReservationGroupComplete), ctx, resourceGroupName, capacityReservationGroupName)
}

// Update mocks base method.
func (m *MockCapacityReservationsClientAPI) Update(ctx context.Context, resourceGroupName, capacityReservationGroupName, capacityReservationName string, parameters compute.CapacityReservationUpdate) (compute.CapacityReservationsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters)
	ret0, _ := ret[0].(compute.CapacityReservationsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCapacityReservationsClientAPIMockRecorder) Update(ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCapacityReservationsClientAPI)(nil).Update), ctx, resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters)
}

// MockVirtualMachineScaleSetExtensionsClientAPI is a mock of VirtualMachineScaleSetExtensionsClientAPI interface.
type MockVirtualMachineScaleSetExtensionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder
}

// MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder is the mock recorder for MockVirtualMachineScaleSetExtensionsClientAPI.
type MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder struct {
	mock *MockVirtualMachineScaleSetExtensionsClientAPI
}

// NewMockVirtualMachineScaleSetExtensionsClientAPI creates a new mock instance.
func NewMockVirtualMachineScaleSetExtensionsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineScaleSetExtensionsClientAPI {
	mock := &MockVirtualMachineScaleSetExtensionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineScaleSetExtensionsClientAPI) EXPECT() *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualMachineScaleSetExtensionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, VMScaleSetName, vmssExtensionName string, extensionParameters compute.VirtualMachineScaleSetExtension) (compute.VirtualMachineScaleSetExtensionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, extensionParameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtensionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, extensionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, extensionParameters)
}

// Delete mocks base method.
func (m *MockVirtualMachineScaleSetExtensionsClientAPI) Delete(ctx context.Context, resourceGroupName, VMScaleSetName, vmssExtensionName string) (compute.VirtualMachineScaleSetExtensionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMScaleSetName, vmssExtensionName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtensionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMScaleSetName, vmssExtensionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClientAPI)(nil).Delete), ctx, resourceGroupName, VMScaleSetName, vmssExtensionName)
}

// Get mocks base method.
func (m *MockVirtualMachineScaleSetExtensionsClientAPI) Get(ctx context.Context, resourceGroupName, VMScaleSetName, vmssExtensionName, expand string) (compute.VirtualMachineScaleSetExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder) Get(ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClientAPI)(nil).Get), ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, expand)
}

// List mocks base method.
func (m *MockVirtualMachineScaleSetExtensionsClientAPI) List(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetExtensionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtensionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder) List(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClientAPI)(nil).List), ctx, resourceGroupName, VMScaleSetName)
}

// ListComplete mocks base method.
func (m *MockVirtualMachineScaleSetExtensionsClientAPI) ListComplete(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetExtensionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtensionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClientAPI)(nil).ListComplete), ctx, resourceGroupName, VMScaleSetName)
}

// Update mocks base method.
func (m *MockVirtualMachineScaleSetExtensionsClientAPI) Update(ctx context.Context, resourceGroupName, VMScaleSetName, vmssExtensionName string, extensionParameters compute.VirtualMachineScaleSetExtensionUpdate) (compute.VirtualMachineScaleSetExtensionsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, extensionParameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtensionsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineScaleSetExtensionsClientAPIMockRecorder) Update(ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, extensionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClientAPI)(nil).Update), ctx, resourceGroupName, VMScaleSetName, vmssExtensionName, extensionParameters)
}

// MockVirtualMachineScaleSetRollingUpgradesClientAPI is a mock of VirtualMachineScaleSetRollingUpgradesClientAPI interface.
type MockVirtualMachineScaleSetRollingUpgradesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder
}

// MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder is the mock recorder for MockVirtualMachineScaleSetRollingUpgradesClientAPI.
type MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder struct {
	mock *MockVirtualMachineScaleSetRollingUpgradesClientAPI
}

// NewMockVirtualMachineScaleSetRollingUpgradesClientAPI creates a new mock instance.
func NewMockVirtualMachineScaleSetRollingUpgradesClientAPI(ctrl *gomock.Controller) *MockVirtualMachineScaleSetRollingUpgradesClientAPI {
	mock := &MockVirtualMachineScaleSetRollingUpgradesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineScaleSetRollingUpgradesClientAPI) EXPECT() *MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockVirtualMachineScaleSetRollingUpgradesClientAPI) Cancel(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetRollingUpgradesCancelFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetRollingUpgradesCancelFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder) Cancel(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockVirtualMachineScaleSetRollingUpgradesClientAPI)(nil).Cancel), ctx, resourceGroupName, VMScaleSetName)
}

// GetLatest mocks base method.
func (m *MockVirtualMachineScaleSetRollingUpgradesClientAPI) GetLatest(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.RollingUpgradeStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.RollingUpgradeStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder) GetLatest(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockVirtualMachineScaleSetRollingUpgradesClientAPI)(nil).GetLatest), ctx, resourceGroupName, VMScaleSetName)
}

// StartExtensionUpgrade mocks base method.
func (m *MockVirtualMachineScaleSetRollingUpgradesClientAPI) StartExtensionUpgrade(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExtensionUpgrade", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetRollingUpgradesStartExtensionUpgradeFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExtensionUpgrade indicates an expected call of StartExtensionUpgrade.
func (mr *MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder) StartExtensionUpgrade(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExtensionUpgrade", reflect.TypeOf((*MockVirtualMachineScaleSetRollingUpgradesClientAPI)(nil).StartExtensionUpgrade), ctx, resourceGroupName, VMScaleSetName)
}

// StartOSUpgrade mocks base method.
func (m *MockVirtualMachineScaleSetRollingUpgradesClientAPI) StartOSUpgrade(ctx context.Context, resourceGroupName, VMScaleSetName string) (compute.VirtualMachineScaleSetRollingUpgradesStartOSUpgradeFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOSUpgrade", ctx, resourceGroupName, VMScaleSetName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetRollingUpgradesStartOSUpgradeFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOSUpgrade indicates an expected call of StartOSUpgrade.
func (mr *MockVirtualMachineScaleSetRollingUpgradesClientAPIMockRecorder) StartOSUpgrade(ctx, resourceGroupName, VMScaleSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOSUpgrade", reflect.TypeOf((*MockVirtualMachineScaleSetRollingUpgradesClientAPI)(nil).StartOSUpgrade), ctx, resourceGroupName, VMScaleSetName)
}

// MockVirtualMachineScaleSetVMExtensionsClientAPI is a mock of VirtualMachineScaleSetVMExtensionsClientAPI interface.
type MockVirtualMachineScaleSetVMExtensionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder
}

// MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder is the mock recorder for MockVirtualMachineScaleSetVMExtensionsClientAPI.
type MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder struct {
	mock *MockVirtualMachineScaleSetVMExtensionsClientAPI
}

// NewMockVirtualMachineScaleSetVMExtensionsClientAPI creates a new mock instance.
func NewMockVirtualMachineScaleSetVMExtensionsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineScaleSetVMExtensionsClientAPI {
	mock := &MockVirtualMachineScaleSetVMExtensionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineScaleSetVMExtensionsClientAPI) EXPECT() *MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualMachineScaleSetVMExtensionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName string, extensionParameters compute.VirtualMachineScaleSetVMExtension) (compute.VirtualMachineScaleSetVMExtensionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, extensionParameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMExtensionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, extensionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineScaleSetVMExtensionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, extensionParameters)
}

// Delete mocks base method.
func (m *MockVirtualMachineScaleSetVMExtensionsClientAPI) Delete(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName string) (compute.VirtualMachineScaleSetVMExtensionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMExtensionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetVMExtensionsClientAPI)(nil).Delete), ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName)
}

// Get mocks base method.
func (m *MockVirtualMachineScaleSetVMExtensionsClientAPI) Get(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, expand string) (compute.VirtualMachineScaleSetVMExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder) Get(ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineScaleSetVMExtensionsClientAPI)(nil).Get), ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, expand)
}

// List mocks base method.
func (m *MockVirtualMachineScaleSetVMExtensionsClientAPI) List(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, expand string) (compute.VirtualMachineScaleSetVMExtensionsListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMExtensionsListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder) List(ctx, resourceGroupName, VMScaleSetName, instanceID, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetVMExtensionsClientAPI)(nil).List), ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
}

// Update mocks base method.
func (m *MockVirtualMachineScaleSetVMExtensionsClientAPI) Update(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName string, extensionParameters compute.VirtualMachineScaleSetVMExtensionUpdate) (compute.VirtualMachineScaleSetVMExtensionsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, extensionParameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMExtensionsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineScaleSetVMExtensionsClientAPIMockRecorder) Update(ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, extensionParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineScaleSetVMExtensionsClientAPI)(nil).Update), ctx, resourceGroupName, VMScaleSetName, instanceID, VMExtensionName, extensionParameters)
}

// MockVirtualMachineScaleSetVMsClientAPI is a mock of VirtualMachineScaleSetVMsClientAPI interface.
type MockVirtualMachineScaleSetVMsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetVMsClientAPIMockRecorder
}

// MockVirtualMachineScaleSetVMsClientAPIMockRecorder is the mock recorder for MockVirtualMachineScaleSetVMsClientAPI.
type MockVirtualMachineScaleSetVMsClientAPIMockRecorder struct {
	mock *MockVirtualMachineScaleSetVMsClientAPI
}

// NewMockVirtualMachineScaleSetVMsClientAPI creates a new mock instance.
func NewMockVirtualMachineScaleSetVMsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineScaleSetVMsClientAPI {
	mock := &MockVirtualMachineScaleSetVMsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetVMsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineScaleSetVMsClientAPI) EXPECT() *MockVirtualMachineScaleSetVMsClientAPIMockRecorder {
	return m.recorder
}

// Deallocate mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Deallocate(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsDeallocateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsDeallocateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deallocate indicates an expected call of Deallocate.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Deallocate(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Deallocate), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Delete mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Delete(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string, forceDeletion *bool) (compute.VirtualMachineScaleSetVMsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMScaleSetName, instanceID, forceDeletion)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMScaleSetName, instanceID, forceDeletion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Delete), ctx, resourceGroupName, VMScaleSetName, instanceID, forceDeletion)
}

// Get mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Get(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string, expand compute.InstanceViewTypes) (compute.VirtualMachineScaleSetVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Get(ctx, resourceGroupName, VMScaleSetName, instanceID, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Get), ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
}

// GetInstanceView mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) GetInstanceView(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMInstanceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceView", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMInstanceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceView indicates an expected call of GetInstanceView.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) GetInstanceView(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceView", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).GetInstanceView), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// List mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) List(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand string) (compute.VirtualMachineScaleSetVMListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) List(ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).List), ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand)
}

// ListComplete mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) ListComplete(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand string) (compute.VirtualMachineScaleSetVMListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).ListComplete), ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand)
}

// PerformMaintenance mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) PerformMaintenance(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsPerformMaintenanceFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformMaintenance", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsPerformMaintenanceFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformMaintenance indicates an expected call of PerformMaintenance.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) PerformMaintenance(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformMaintenance", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).PerformMaintenance), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// PowerOff mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) PowerOff(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string, skipShutdown *bool) (compute.VirtualMachineScaleSetVMsPowerOffFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", ctx, resourceGroupName, VMScaleSetName, instanceID, skipShutdown)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsPowerOffFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) PowerOff(ctx, resourceGroupName, VMScaleSetName, instanceID, skipShutdown interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).PowerOff), ctx, resourceGroupName, VMScaleSetName, instanceID, skipShutdown)
}

// Redeploy mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Redeploy(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsRedeployFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redeploy", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsRedeployFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redeploy indicates an expected call of Redeploy.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Redeploy(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redeploy", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Redeploy), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Reimage mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Reimage(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string, VMScaleSetVMReimageInput *compute.VirtualMachineScaleSetVMReimageParameters) (compute.VirtualMachineScaleSetVMsReimageFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", ctx, resourceGroupName, VMScaleSetName, instanceID, VMScaleSetVMReimageInput)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsReimageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reimage indicates an expected call of Reimage.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Reimage(ctx, resourceGroupName, VMScaleSetName, instanceID, VMScaleSetVMReimageInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Reimage), ctx, resourceGroupName, VMScaleSetName, instanceID, VMScaleSetVMReimageInput)
}

// ReimageAll mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) ReimageAll(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsReimageAllFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReimageAll", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsReimageAllFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReimageAll indicates an expected call of ReimageAll.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) ReimageAll(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReimageAll", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).ReimageAll), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Restart mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Restart(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsRestartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsRestartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Restart(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Restart), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// RetrieveBootDiagnosticsData mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) RetrieveBootDiagnosticsData(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string, sasURIExpirationTimeInMinutes *int32) (compute.RetrieveBootDiagnosticsDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBootDiagnosticsData", ctx, resourceGroupName, VMScaleSetName, instanceID, sasURIExpirationTimeInMinutes)
	ret0, _ := ret[0].(compute.RetrieveBootDiagnosticsDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveBootDiagnosticsData indicates an expected call of RetrieveBootDiagnosticsData.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) RetrieveBootDiagnosticsData(ctx, resourceGroupName, VMScaleSetName, instanceID, sasURIExpirationTimeInMinutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBootDiagnosticsData", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).RetrieveBootDiagnosticsData), ctx, resourceGroupName, VMScaleSetName, instanceID, sasURIExpirationTimeInMinutes)
}

// RunCommand mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) RunCommand(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string, parameters compute.RunCommandInput) (compute.VirtualMachineScaleSetVMsRunCommandFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", ctx, resourceGroupName, VMScaleSetName, instanceID, parameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsRunCommandFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) RunCommand(ctx, resourceGroupName, VMScaleSetName, instanceID, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).RunCommand), ctx, resourceGroupName, VMScaleSetName, instanceID, parameters)
}

// SimulateEviction mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) SimulateEviction(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulateEviction", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulateEviction indicates an expected call of SimulateEviction.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) SimulateEviction(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateEviction", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).SimulateEviction), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Start mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Start(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsStartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Start(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Start), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Update mocks base method.
func (m *MockVirtualMachineScaleSetVMsClientAPI) Update(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string, parameters compute.VirtualMachineScaleSetVM) (compute.VirtualMachineScaleSetVMsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMScaleSetName, instanceID, parameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineScaleSetVMsClientAPIMockRecorder) Update(ctx, resourceGroupName, VMScaleSetName, instanceID, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClientAPI)(nil).Update), ctx, resourceGroupName, VMScaleSetName, instanceID, parameters)
}

// MockLogAnalyticsClientAPI is a mock of LogAnalyticsClientAPI interface.
type MockLogAnalyticsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLogAnalyticsClientAPIMockRecorder
}

// MockLogAnalyticsClientAPIMockRecorder is the mock recorder for MockLogAnalyticsClientAPI.
type MockLogAnalyticsClientAPIMockRecorder struct {
	mock *MockLogAnalyticsClientAPI
}

// NewMockLogAnalyticsClientAPI creates a new mock instance.
func NewMockLogAnalyticsClientAPI(ctrl *gomock.Controller) *MockLogAnalyticsClientAPI {
	mock := &MockLogAnalyticsClientAPI{ctrl: ctrl}
	mock.recorder = &MockLogAnalyticsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogAnalyticsClientAPI) EXPECT() *MockLogAnalyticsClientAPIMockRecorder {
	return m.recorder
}

// ExportRequestRateByInterval mocks base method.
func (m *MockLogAnalyticsClientAPI) ExportRequestRateByInterval(ctx context.Context, parameters compute.RequestRateByIntervalInput, location string) (compute.LogAnalyticsExportRequestRateByIntervalFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRequestRateByInterval", ctx, parameters, location)
	ret0, _ := ret[0].(compute.LogAnalyticsExportRequestRateByIntervalFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRequestRateByInterval indicates an expected call of ExportRequestRateByInterval.
func (mr *MockLogAnalyticsClientAPIMockRecorder) ExportRequestRateByInterval(ctx, parameters, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRequestRateByInterval", reflect.TypeOf((*MockLogAnalyticsClientAPI)(nil).ExportRequestRateByInterval), ctx, parameters, location)
}

// ExportThrottledRequests mocks base method.
func (m *MockLogAnalyticsClientAPI) ExportThrottledRequests(ctx context.Context, parameters compute.ThrottledRequestsInput, location string) (compute.LogAnalyticsExportThrottledRequestsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportThrottledRequests", ctx, parameters, location)
	ret0, _ := ret[0].(compute.LogAnalyticsExportThrottledRequestsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportThrottledRequests indicates an expected call of ExportThrottledRequests.
func (mr *MockLogAnalyticsClientAPIMockRecorder) ExportThrottledRequests(ctx, parameters, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportThrottledRequests", reflect.TypeOf((*MockLogAnalyticsClientAPI)(nil).ExportThrottledRequests), ctx, parameters, location)
}

// MockVirtualMachineRunCommandsClientAPI is a mock of VirtualMachineRunCommandsClientAPI interface.
type MockVirtualMachineRunCommandsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineRunCommandsClientAPIMockRecorder
}

// MockVirtualMachineRunCommandsClientAPIMockRecorder is the mock recorder for MockVirtualMachineRunCommandsClientAPI.
type MockVirtualMachineRunCommandsClientAPIMockRecorder struct {
	mock *MockVirtualMachineRunCommandsClientAPI
}

// NewMockVirtualMachineRunCommandsClientAPI creates a new mock instance.
func NewMockVirtualMachineRunCommandsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineRunCommandsClientAPI {
	mock := &MockVirtualMachineRunCommandsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineRunCommandsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineRunCommandsClientAPI) EXPECT() *MockVirtualMachineRunCommandsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, VMName, runCommandName string, runCommand compute.VirtualMachineRunCommand) (compute.VirtualMachineRunCommandsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, VMName, runCommandName, runCommand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommandsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, VMName, runCommandName, runCommand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, VMName, runCommandName, runCommand)
}

// Delete mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) Delete(ctx context.Context, resourceGroupName, VMName, runCommandName string) (compute.VirtualMachineRunCommandsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMName, runCommandName)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommandsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMName, runCommandName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).Delete), ctx, resourceGroupName, VMName, runCommandName)
}

// Get mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) Get(ctx context.Context, location, commandID string) (compute.RunCommandDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, commandID)
	ret0, _ := ret[0].(compute.RunCommandDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) Get(ctx, location, commandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).Get), ctx, location, commandID)
}

// GetByVirtualMachine mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) GetByVirtualMachine(ctx context.Context, resourceGroupName, VMName, runCommandName, expand string) (compute.VirtualMachineRunCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByVirtualMachine", ctx, resourceGroupName, VMName, runCommandName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByVirtualMachine indicates an expected call of GetByVirtualMachine.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) GetByVirtualMachine(ctx, resourceGroupName, VMName, runCommandName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByVirtualMachine", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).GetByVirtualMachine), ctx, resourceGroupName, VMName, runCommandName, expand)
}

// List mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) List(ctx context.Context, location string) (compute.RunCommandListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location)
	ret0, _ := ret[0].(compute.RunCommandListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) List(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).List), ctx, location)
}

// ListByVirtualMachine mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) ListByVirtualMachine(ctx context.Context, resourceGroupName, VMName, expand string) (compute.VirtualMachineRunCommandsListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVirtualMachine", ctx, resourceGroupName, VMName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommandsListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVirtualMachine indicates an expected call of ListByVirtualMachine.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) ListByVirtualMachine(ctx, resourceGroupName, VMName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVirtualMachine", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).ListByVirtualMachine), ctx, resourceGroupName, VMName, expand)
}

// ListByVirtualMachineComplete mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) ListByVirtualMachineComplete(ctx context.Context, resourceGroupName, VMName, expand string) (compute.VirtualMachineRunCommandsListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVirtualMachineComplete", ctx, resourceGroupName, VMName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommandsListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVirtualMachineComplete indicates an expected call of ListByVirtualMachineComplete.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) ListByVirtualMachineComplete(ctx, resourceGroupName, VMName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVirtualMachineComplete", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).ListByVirtualMachineComplete), ctx, resourceGroupName, VMName, expand)
}

// ListComplete mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) ListComplete(ctx context.Context, location string) (compute.RunCommandListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location)
	ret0, _ := ret[0].(compute.RunCommandListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) ListComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).ListComplete), ctx, location)
}

// Update mocks base method.
func (m *MockVirtualMachineRunCommandsClientAPI) Update(ctx context.Context, resourceGroupName, VMName, runCommandName string, runCommand compute.VirtualMachineRunCommandUpdate) (compute.VirtualMachineRunCommandsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMName, runCommandName, runCommand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommandsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineRunCommandsClientAPIMockRecorder) Update(ctx, resourceGroupName, VMName, runCommandName, runCommand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineRunCommandsClientAPI)(nil).Update), ctx, resourceGroupName, VMName, runCommandName, runCommand)
}

// MockVirtualMachineScaleSetVMRunCommandsClientAPI is a mock of VirtualMachineScaleSetVMRunCommandsClientAPI interface.
type MockVirtualMachineScaleSetVMRunCommandsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder
}

// MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder is the mock recorder for MockVirtualMachineScaleSetVMRunCommandsClientAPI.
type MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder struct {
	mock *MockVirtualMachineScaleSetVMRunCommandsClientAPI
}

// NewMockVirtualMachineScaleSetVMRunCommandsClientAPI creates a new mock instance.
func NewMockVirtualMachineScaleSetVMRunCommandsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineScaleSetVMRunCommandsClientAPI {
	mock := &MockVirtualMachineScaleSetVMRunCommandsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineScaleSetVMRunCommandsClientAPI) EXPECT() *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualMachineScaleSetVMRunCommandsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, runCommandName string, runCommand compute.VirtualMachineRunCommand) (compute.VirtualMachineScaleSetVMRunCommandsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, runCommand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMRunCommandsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, runCommand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineScaleSetVMRunCommandsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, runCommand)
}

// Delete mocks base method.
func (m *MockVirtualMachineScaleSetVMRunCommandsClientAPI) Delete(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, runCommandName string) (compute.VirtualMachineScaleSetVMRunCommandsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMRunCommandsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder) Delete(ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetVMRunCommandsClientAPI)(nil).Delete), ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName)
}

// Get mocks base method.
func (m *MockVirtualMachineScaleSetVMRunCommandsClientAPI) Get(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, runCommandName, expand string) (compute.VirtualMachineRunCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, expand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder) Get(ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineScaleSetVMRunCommandsClientAPI)(nil).Get), ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, expand)
}

// List mocks base method.
func (m *MockVirtualMachineScaleSetVMRunCommandsClientAPI) List(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, expand string) (compute.VirtualMachineRunCommandsListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommandsListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder) List(ctx, resourceGroupName, VMScaleSetName, instanceID, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetVMRunCommandsClientAPI)(nil).List), ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
}

// ListComplete mocks base method.
func (m *MockVirtualMachineScaleSetVMRunCommandsClientAPI) ListComplete(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, expand string) (compute.VirtualMachineRunCommandsListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
	ret0, _ := ret[0].(compute.VirtualMachineRunCommandsListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, VMScaleSetName, instanceID, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualMachineScaleSetVMRunCommandsClientAPI)(nil).ListComplete), ctx, resourceGroupName, VMScaleSetName, instanceID, expand)
}

// Update mocks base method.
func (m *MockVirtualMachineScaleSetVMRunCommandsClientAPI) Update(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID, runCommandName string, runCommand compute.VirtualMachineRunCommandUpdate) (compute.VirtualMachineScaleSetVMRunCommandsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, runCommand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMRunCommandsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineScaleSetVMRunCommandsClientAPIMockRecorder) Update(ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, runCommand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineScaleSetVMRunCommandsClientAPI)(nil).Update), ctx, resourceGroupName, VMScaleSetName, instanceID, runCommandName, runCommand)
}

// MockResourceSkusClientAPI is a mock of ResourceSkusClientAPI interface.
type MockResourceSkusClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockResourceSkusClientAPIMockRecorder
}

// MockResourceSkusClientAPIMockRecorder is the mock recorder for MockResourceSkusClientAPI.
type MockResourceSkusClientAPIMockRecorder struct {
	mock *MockResourceSkusClientAPI
}

// NewMockResourceSkusClientAPI creates a new mock instance.
func NewMockResourceSkusClientAPI(ctrl *gomock.Controller) *MockResourceSkusClientAPI {
	mock := &MockResourceSkusClientAPI{ctrl: ctrl}
	mock.recorder = &MockResourceSkusClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceSkusClientAPI) EXPECT() *MockResourceSkusClientAPIMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockResourceSkusClientAPI) List(ctx context.Context, filter, includeExtendedLocations string) (compute.ResourceSkusResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter, includeExtendedLocations)
	ret0, _ := ret[0].(compute.ResourceSkusResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResourceSkusClientAPIMockRecorder) List(ctx, filter, includeExtendedLocations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceSkusClientAPI)(nil).List), ctx, filter, includeExtendedLocations)
}

// ListComplete mocks base method.
func (m *MockResourceSkusClientAPI) ListComplete(ctx context.Context, filter, includeExtendedLocations string) (compute.ResourceSkusResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, filter, includeExtendedLocations)
	ret0, _ := ret[0].(compute.ResourceSkusResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockResourceSkusClientAPIMockRecorder) ListComplete(ctx, filter, includeExtendedLocations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockResourceSkusClientAPI)(nil).ListComplete), ctx, filter, includeExtendedLocations)
}

// MockDisksClientAPI is a mock of DisksClientAPI interface.
type MockDisksClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDisksClientAPIMockRecorder
}

// MockDisksClientAPIMockRecorder is the mock recorder for MockDisksClientAPI.
type MockDisksClientAPIMockRecorder struct {
	mock *MockDisksClientAPI
}

// NewMockDisksClientAPI creates a new mock instance.
func NewMockDisksClientAPI(ctrl *gomock.Controller) *MockDisksClientAPI {
	mock := &MockDisksClientAPI{ctrl: ctrl}
	mock.recorder = &MockDisksClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisksClientAPI) EXPECT() *MockDisksClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDisksClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, diskName string, disk compute.Disk) (compute.DisksCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, diskName, disk)
	ret0, _ := ret[0].(compute.DisksCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDisksClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, diskName, disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDisksClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, diskName, disk)
}

// Delete mocks base method.
func (m *MockDisksClientAPI) Delete(ctx context.Context, resourceGroupName, diskName string) (compute.DisksDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, diskName)
	ret0, _ := ret[0].(compute.DisksDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDisksClientAPIMockRecorder) Delete(ctx, resourceGroupName, diskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDisksClientAPI)(nil).Delete), ctx, resourceGroupName, diskName)
}

// Get mocks base method.
func (m *MockDisksClientAPI) Get(ctx context.Context, resourceGroupName, diskName string) (compute.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, diskName)
	ret0, _ := ret[0].(compute.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDisksClientAPIMockRecorder) Get(ctx, resourceGroupName, diskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDisksClientAPI)(nil).Get), ctx, resourceGroupName, diskName)
}

// GrantAccess mocks base method.
func (m *MockDisksClientAPI) GrantAccess(ctx context.Context, resourceGroupName, diskName string, grantAccessData compute.GrantAccessData) (compute.DisksGrantAccessFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccess", ctx, resourceGroupName, diskName, grantAccessData)
	ret0, _ := ret[0].(compute.DisksGrantAccessFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAccess indicates an expected call of GrantAccess.
func (mr *MockDisksClientAPIMockRecorder) GrantAccess(ctx, resourceGroupName, diskName, grantAccessData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockDisksClientAPI)(nil).GrantAccess), ctx, resourceGroupName, diskName, grantAccessData)
}

// List mocks base method.
func (m *MockDisksClientAPI) List(ctx context.Context) (compute.DiskListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(compute.DiskListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDisksClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDisksClientAPI)(nil).List), ctx)
}

// ListByResourceGroup mocks base method.
func (m *MockDisksClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.DiskListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DiskListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockDisksClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockDisksClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockDisksClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.DiskListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DiskListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockDisksClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockDisksClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListComplete mocks base method.
func (m *MockDisksClientAPI) ListComplete(ctx context.Context) (compute.DiskListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(compute.DiskListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockDisksClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockDisksClientAPI)(nil).ListComplete), ctx)
}

// RevokeAccess mocks base method.
func (m *MockDisksClientAPI) RevokeAccess(ctx context.Context, resourceGroupName, diskName string) (compute.DisksRevokeAccessFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccess", ctx, resourceGroupName, diskName)
	ret0, _ := ret[0].(compute.DisksRevokeAccessFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccess indicates an expected call of RevokeAccess.
func (mr *MockDisksClientAPIMockRecorder) RevokeAccess(ctx, resourceGroupName, diskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccess", reflect.TypeOf((*MockDisksClientAPI)(nil).RevokeAccess), ctx, resourceGroupName, diskName)
}

// Update mocks base method.
func (m *MockDisksClientAPI) Update(ctx context.Context, resourceGroupName, diskName string, disk compute.DiskUpdate) (compute.DisksUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, diskName, disk)
	ret0, _ := ret[0].(compute.DisksUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDisksClientAPIMockRecorder) Update(ctx, resourceGroupName, diskName, disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDisksClientAPI)(nil).Update), ctx, resourceGroupName, diskName, disk)
}

// MockSnapshotsClientAPI is a mock of SnapshotsClientAPI interface.
type MockSnapshotsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotsClientAPIMockRecorder
}

// MockSnapshotsClientAPIMockRecorder is the mock recorder for MockSnapshotsClientAPI.
type MockSnapshotsClientAPIMockRecorder struct {
	mock *MockSnapshotsClientAPI
}

// NewMockSnapshotsClientAPI creates a new mock instance.
func NewMockSnapshotsClientAPI(ctrl *gomock.Controller) *MockSnapshotsClientAPI {
	mock := &MockSnapshotsClientAPI{ctrl: ctrl}
	mock.recorder = &MockSnapshotsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotsClientAPI) EXPECT() *MockSnapshotsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockSnapshotsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, snapshotName string, snapshot compute.Snapshot) (compute.SnapshotsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, snapshotName, snapshot)
	ret0, _ := ret[0].(compute.SnapshotsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockSnapshotsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, snapshotName, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, snapshotName, snapshot)
}

// Delete mocks base method.
func (m *MockSnapshotsClientAPI) Delete(ctx context.Context, resourceGroupName, snapshotName string) (compute.SnapshotsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, snapshotName)
	ret0, _ := ret[0].(compute.SnapshotsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSnapshotsClientAPIMockRecorder) Delete(ctx, resourceGroupName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).Delete), ctx, resourceGroupName, snapshotName)
}

// Get mocks base method.
func (m *MockSnapshotsClientAPI) Get(ctx context.Context, resourceGroupName, snapshotName string) (compute.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, snapshotName)
	ret0, _ := ret[0].(compute.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSnapshotsClientAPIMockRecorder) Get(ctx, resourceGroupName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).Get), ctx, resourceGroupName, snapshotName)
}

// GrantAccess mocks base method.
func (m *MockSnapshotsClientAPI) GrantAccess(ctx context.Context, resourceGroupName, snapshotName string, grantAccessData compute.GrantAccessData) (compute.SnapshotsGrantAccessFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccess", ctx, resourceGroupName, snapshotName, grantAccessData)
	ret0, _ := ret[0].(compute.SnapshotsGrantAccessFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAccess indicates an expected call of GrantAccess.
func (mr *MockSnapshotsClientAPIMockRecorder) GrantAccess(ctx, resourceGroupName, snapshotName, grantAccessData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).GrantAccess), ctx, resourceGroupName, snapshotName, grantAccessData)
}

// List mocks base method.
func (m *MockSnapshotsClientAPI) List(ctx context.Context) (compute.SnapshotListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(compute.SnapshotListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSnapshotsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).List), ctx)
}

// ListByResourceGroup mocks base method.
func (m *MockSnapshotsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.SnapshotListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.SnapshotListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockSnapshotsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockSnapshotsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.SnapshotListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.SnapshotListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockSnapshotsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListComplete mocks base method.
func (m *MockSnapshotsClientAPI) ListComplete(ctx context.Context) (compute.SnapshotListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(compute.SnapshotListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockSnapshotsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).ListComplete), ctx)
}

// RevokeAccess mocks base method.
func (m *MockSnapshotsClientAPI) RevokeAccess(ctx context.Context, resourceGroupName, snapshotName string) (compute.SnapshotsRevokeAccessFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccess", ctx, resourceGroupName, snapshotName)
	ret0, _ := ret[0].(compute.SnapshotsRevokeAccessFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccess indicates an expected call of RevokeAccess.
func (mr *MockSnapshotsClientAPIMockRecorder) RevokeAccess(ctx, resourceGroupName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccess", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).RevokeAccess), ctx, resourceGroupName, snapshotName)
}

// Update mocks base method.
func (m *MockSnapshotsClientAPI) Update(ctx context.Context, resourceGroupName, snapshotName string, snapshot compute.SnapshotUpdate) (compute.SnapshotsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, snapshotName, snapshot)
	ret0, _ := ret[0].(compute.SnapshotsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSnapshotsClientAPIMockRecorder) Update(ctx, resourceGroupName, snapshotName, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSnapshotsClientAPI)(nil).Update), ctx, resourceGroupName, snapshotName, snapshot)
}

// MockDiskEncryptionSetsClientAPI is a mock of DiskEncryptionSetsClientAPI interface.
type MockDiskEncryptionSetsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDiskEncryptionSetsClientAPIMockRecorder
}

// MockDiskEncryptionSetsClientAPIMockRecorder is the mock recorder for MockDiskEncryptionSetsClientAPI.
type MockDiskEncryptionSetsClientAPIMockRecorder struct {
	mock *MockDiskEncryptionSetsClientAPI
}

// NewMockDiskEncryptionSetsClientAPI creates a new mock instance.
func NewMockDiskEncryptionSetsClientAPI(ctrl *gomock.Controller) *MockDiskEncryptionSetsClientAPI {
	mock := &MockDiskEncryptionSetsClientAPI{ctrl: ctrl}
	mock.recorder = &MockDiskEncryptionSetsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskEncryptionSetsClientAPI) EXPECT() *MockDiskEncryptionSetsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, diskEncryptionSetName string, diskEncryptionSet compute.DiskEncryptionSet) (compute.DiskEncryptionSetsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, diskEncryptionSetName, diskEncryptionSet)
	ret0, _ := ret[0].(compute.DiskEncryptionSetsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, diskEncryptionSetName, diskEncryptionSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, diskEncryptionSetName, diskEncryptionSet)
}

// Delete mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) Delete(ctx context.Context, resourceGroupName, diskEncryptionSetName string) (compute.DiskEncryptionSetsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, diskEncryptionSetName)
	ret0, _ := ret[0].(compute.DiskEncryptionSetsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) Delete(ctx, resourceGroupName, diskEncryptionSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).Delete), ctx, resourceGroupName, diskEncryptionSetName)
}

// Get mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) Get(ctx context.Context, resourceGroupName, diskEncryptionSetName string) (compute.DiskEncryptionSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, diskEncryptionSetName)
	ret0, _ := ret[0].(compute.DiskEncryptionSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) Get(ctx, resourceGroupName, diskEncryptionSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).Get), ctx, resourceGroupName, diskEncryptionSetName)
}

// List mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) List(ctx context.Context) (compute.DiskEncryptionSetListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(compute.DiskEncryptionSetListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).List), ctx)
}

// ListAssociatedResources mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) ListAssociatedResources(ctx context.Context, resourceGroupName, diskEncryptionSetName string) (compute.ResourceURIListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedResources", ctx, resourceGroupName, diskEncryptionSetName)
	ret0, _ := ret[0].(compute.ResourceURIListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedResources indicates an expected call of ListAssociatedResources.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) ListAssociatedResources(ctx, resourceGroupName, diskEncryptionSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResources", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).ListAssociatedResources), ctx, resourceGroupName, diskEncryptionSetName)
}

// ListAssociatedResourcesComplete mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) ListAssociatedResourcesComplete(ctx context.Context, resourceGroupName, diskEncryptionSetName string) (compute.ResourceURIListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedResourcesComplete", ctx, resourceGroupName, diskEncryptionSetName)
	ret0, _ := ret[0].(compute.ResourceURIListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedResourcesComplete indicates an expected call of ListAssociatedResourcesComplete.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) ListAssociatedResourcesComplete(ctx, resourceGroupName, diskEncryptionSetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResourcesComplete", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).ListAssociatedResourcesComplete), ctx, resourceGroupName, diskEncryptionSetName)
}

// ListByResourceGroup mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.DiskEncryptionSetListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DiskEncryptionSetListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.DiskEncryptionSetListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DiskEncryptionSetListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListComplete mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) ListComplete(ctx context.Context) (compute.DiskEncryptionSetListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(compute.DiskEncryptionSetListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).ListComplete), ctx)
}

// Update mocks base method.
func (m *MockDiskEncryptionSetsClientAPI) Update(ctx context.Context, resourceGroupName, diskEncryptionSetName string, diskEncryptionSet compute.DiskEncryptionSetUpdate) (compute.DiskEncryptionSetsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, diskEncryptionSetName, diskEncryptionSet)
	ret0, _ := ret[0].(compute.DiskEncryptionSetsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDiskEncryptionSetsClientAPIMockRecorder) Update(ctx, resourceGroupName, diskEncryptionSetName, diskEncryptionSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDiskEncryptionSetsClientAPI)(nil).Update), ctx, resourceGroupName, diskEncryptionSetName, diskEncryptionSet)
}

// MockDiskAccessesClientAPI is a mock of DiskAccessesClientAPI interface.
type MockDiskAccessesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDiskAccessesClientAPIMockRecorder
}

// MockDiskAccessesClientAPIMockRecorder is the mock recorder for MockDiskAccessesClientAPI.
type MockDiskAccessesClientAPIMockRecorder struct {
	mock *MockDiskAccessesClientAPI
}

// NewMockDiskAccessesClientAPI creates a new mock instance.
func NewMockDiskAccessesClientAPI(ctrl *gomock.Controller) *MockDiskAccessesClientAPI {
	mock := &MockDiskAccessesClientAPI{ctrl: ctrl}
	mock.recorder = &MockDiskAccessesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskAccessesClientAPI) EXPECT() *MockDiskAccessesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDiskAccessesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, diskAccessName string, diskAccess compute.DiskAccess) (compute.DiskAccessesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, diskAccessName, diskAccess)
	ret0, _ := ret[0].(compute.DiskAccessesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDiskAccessesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, diskAccessName, diskAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, diskAccessName, diskAccess)
}

// Delete mocks base method.
func (m *MockDiskAccessesClientAPI) Delete(ctx context.Context, resourceGroupName, diskAccessName string) (compute.DiskAccessesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, diskAccessName)
	ret0, _ := ret[0].(compute.DiskAccessesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDiskAccessesClientAPIMockRecorder) Delete(ctx, resourceGroupName, diskAccessName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).Delete), ctx, resourceGroupName, diskAccessName)
}

// DeleteAPrivateEndpointConnection mocks base method.
func (m *MockDiskAccessesClientAPI) DeleteAPrivateEndpointConnection(ctx context.Context, resourceGroupName, diskAccessName, privateEndpointConnectionName string) (compute.DiskAccessesDeleteAPrivateEndpointConnectionFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPrivateEndpointConnection", ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName)
	ret0, _ := ret[0].(compute.DiskAccessesDeleteAPrivateEndpointConnectionFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPrivateEndpointConnection indicates an expected call of DeleteAPrivateEndpointConnection.
func (mr *MockDiskAccessesClientAPIMockRecorder) DeleteAPrivateEndpointConnection(ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPrivateEndpointConnection", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).DeleteAPrivateEndpointConnection), ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName)
}

// Get mocks base method.
func (m *MockDiskAccessesClientAPI) Get(ctx context.Context, resourceGroupName, diskAccessName string) (compute.DiskAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, diskAccessName)
	ret0, _ := ret[0].(compute.DiskAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDiskAccessesClientAPIMockRecorder) Get(ctx, resourceGroupName, diskAccessName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).Get), ctx, resourceGroupName, diskAccessName)
}

// GetAPrivateEndpointConnection mocks base method.
func (m *MockDiskAccessesClientAPI) GetAPrivateEndpointConnection(ctx context.Context, resourceGroupName, diskAccessName, privateEndpointConnectionName string) (compute.PrivateEndpointConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPrivateEndpointConnection", ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName)
	ret0, _ := ret[0].(compute.PrivateEndpointConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPrivateEndpointConnection indicates an expected call of GetAPrivateEndpointConnection.
func (mr *MockDiskAccessesClientAPIMockRecorder) GetAPrivateEndpointConnection(ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPrivateEndpointConnection", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).GetAPrivateEndpointConnection), ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName)
}

// GetPrivateLinkResources mocks base method.
func (m *MockDiskAccessesClientAPI) GetPrivateLinkResources(ctx context.Context, resourceGroupName, diskAccessName string) (compute.PrivateLinkResourceListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateLinkResources", ctx, resourceGroupName, diskAccessName)
	ret0, _ := ret[0].(compute.PrivateLinkResourceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateLinkResources indicates an expected call of GetPrivateLinkResources.
func (mr *MockDiskAccessesClientAPIMockRecorder) GetPrivateLinkResources(ctx, resourceGroupName, diskAccessName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateLinkResources", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).GetPrivateLinkResources), ctx, resourceGroupName, diskAccessName)
}

// List mocks base method.
func (m *MockDiskAccessesClientAPI) List(ctx context.Context) (compute.DiskAccessListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(compute.DiskAccessListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDiskAccessesClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).List), ctx)
}

// ListByResourceGroup mocks base method.
func (m *MockDiskAccessesClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.DiskAccessListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DiskAccessListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockDiskAccessesClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockDiskAccessesClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.DiskAccessListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.DiskAccessListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockDiskAccessesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListComplete mocks base method.
func (m *MockDiskAccessesClientAPI) ListComplete(ctx context.Context) (compute.DiskAccessListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(compute.DiskAccessListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockDiskAccessesClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).ListComplete), ctx)
}

// ListPrivateEndpointConnections mocks base method.
func (m *MockDiskAccessesClientAPI) ListPrivateEndpointConnections(ctx context.Context, resourceGroupName, diskAccessName string) (compute.PrivateEndpointConnectionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateEndpointConnections", ctx, resourceGroupName, diskAccessName)
	ret0, _ := ret[0].(compute.PrivateEndpointConnectionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateEndpointConnections indicates an expected call of ListPrivateEndpointConnections.
func (mr *MockDiskAccessesClientAPIMockRecorder) ListPrivateEndpointConnections(ctx, resourceGroupName, diskAccessName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateEndpointConnections", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).ListPrivateEndpointConnections), ctx, resourceGroupName, diskAccessName)
}

// ListPrivateEndpointConnectionsComplete mocks base method.
func (m *MockDiskAccessesClientAPI) ListPrivateEndpointConnectionsComplete(ctx context.Context, resourceGroupName, diskAccessName string) (compute.PrivateEndpointConnectionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateEndpointConnectionsComplete", ctx, resourceGroupName, diskAccessName)
	ret0, _ := ret[0].(compute.PrivateEndpointConnectionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateEndpointConnectionsComplete indicates an expected call of ListPrivateEndpointConnectionsComplete.
func (mr *MockDiskAccessesClientAPIMockRecorder) ListPrivateEndpointConnectionsComplete(ctx, resourceGroupName, diskAccessName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateEndpointConnectionsComplete", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).ListPrivateEndpointConnectionsComplete), ctx, resourceGroupName, diskAccessName)
}

// Update mocks base method.
func (m *MockDiskAccessesClientAPI) Update(ctx context.Context, resourceGroupName, diskAccessName string, diskAccess compute.DiskAccessUpdate) (compute.DiskAccessesUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, diskAccessName, diskAccess)
	ret0, _ := ret[0].(compute.DiskAccessesUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDiskAccessesClientAPIMockRecorder) Update(ctx, resourceGroupName, diskAccessName, diskAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).Update), ctx, resourceGroupName, diskAccessName, diskAccess)
}

// UpdateAPrivateEndpointConnection mocks base method.
func (m *MockDiskAccessesClientAPI) UpdateAPrivateEndpointConnection(ctx context.Context, resourceGroupName, diskAccessName, privateEndpointConnectionName string, privateEndpointConnection compute.PrivateEndpointConnection) (compute.DiskAccessesUpdateAPrivateEndpointConnectionFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPrivateEndpointConnection", ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection)
	ret0, _ := ret[0].(compute.DiskAccessesUpdateAPrivateEndpointConnectionFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAPrivateEndpointConnection indicates an expected call of UpdateAPrivateEndpointConnection.
func (mr *MockDiskAccessesClientAPIMockRecorder) UpdateAPrivateEndpointConnection(ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPrivateEndpointConnection", reflect.TypeOf((*MockDiskAccessesClientAPI)(nil).UpdateAPrivateEndpointConnection), ctx, resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection)
}

// MockDiskRestorePointClientAPI is a mock of DiskRestorePointClientAPI interface.
type MockDiskRestorePointClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDiskRestorePointClientAPIMockRecorder
}

// MockDiskRestorePointClientAPIMockRecorder is the mock recorder for MockDiskRestorePointClientAPI.
type MockDiskRestorePointClientAPIMockRecorder struct {
	mock *MockDiskRestorePointClientAPI
}

// NewMockDiskRestorePointClientAPI creates a new mock instance.
func NewMockDiskRestorePointClientAPI(ctrl *gomock.Controller) *MockDiskRestorePointClientAPI {
	mock := &MockDiskRestorePointClientAPI{ctrl: ctrl}
	mock.recorder = &MockDiskRestorePointClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskRestorePointClientAPI) EXPECT() *MockDiskRestorePointClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDiskRestorePointClientAPI) Get(ctx context.Context, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName string) (compute.DiskRestorePoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName)
	ret0, _ := ret[0].(compute.DiskRestorePoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDiskRestorePointClientAPIMockRecorder) Get(ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiskRestorePointClientAPI)(nil).Get), ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName)
}

// GrantAccess mocks base method.
func (m *MockDiskRestorePointClientAPI) GrantAccess(ctx context.Context, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName string, grantAccessData compute.GrantAccessData) (compute.DiskRestorePointGrantAccessFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccess", ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName, grantAccessData)
	ret0, _ := ret[0].(compute.DiskRestorePointGrantAccessFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAccess indicates an expected call of GrantAccess.
func (mr *MockDiskRestorePointClientAPIMockRecorder) GrantAccess(ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName, grantAccessData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockDiskRestorePointClientAPI)(nil).GrantAccess), ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName, grantAccessData)
}

// ListByRestorePoint mocks base method.
func (m *MockDiskRestorePointClientAPI) ListByRestorePoint(ctx context.Context, resourceGroupName, restorePointCollectionName, VMRestorePointName string) (compute.DiskRestorePointListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRestorePoint", ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName)
	ret0, _ := ret[0].(compute.DiskRestorePointListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRestorePoint indicates an expected call of ListByRestorePoint.
func (mr *MockDiskRestorePointClientAPIMockRecorder) ListByRestorePoint(ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRestorePoint", reflect.TypeOf((*MockDiskRestorePointClientAPI)(nil).ListByRestorePoint), ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName)
}

// ListByRestorePointComplete mocks base method.
func (m *MockDiskRestorePointClientAPI) ListByRestorePointComplete(ctx context.Context, resourceGroupName, restorePointCollectionName, VMRestorePointName string) (compute.DiskRestorePointListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRestorePointComplete", ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName)
	ret0, _ := ret[0].(compute.DiskRestorePointListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRestorePointComplete indicates an expected call of ListByRestorePointComplete.
func (mr *MockDiskRestorePointClientAPIMockRecorder) ListByRestorePointComplete(ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRestorePointComplete", reflect.TypeOf((*MockDiskRestorePointClientAPI)(nil).ListByRestorePointComplete), ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName)
}

// RevokeAccess mocks base method.
func (m *MockDiskRestorePointClientAPI) RevokeAccess(ctx context.Context, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName string) (compute.DiskRestorePointRevokeAccessFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccess", ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName)
	ret0, _ := ret[0].(compute.DiskRestorePointRevokeAccessFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccess indicates an expected call of RevokeAccess.
func (mr *MockDiskRestorePointClientAPIMockRecorder) RevokeAccess(ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccess", reflect.TypeOf((*MockDiskRestorePointClientAPI)(nil).RevokeAccess), ctx, resourceGroupName, restorePointCollectionName, VMRestorePointName, diskRestorePointName)
}

// MockGalleriesClientAPI is a mock of GalleriesClientAPI interface.
type MockGalleriesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGalleriesClientAPIMockRecorder
}

// MockGalleriesClientAPIMockRecorder is the mock recorder for MockGalleriesClientAPI.
type MockGalleriesClientAPIMockRecorder struct {
	mock *MockGalleriesClientAPI
}

// NewMockGalleriesClientAPI creates a new mock instance.
func NewMockGalleriesClientAPI(ctrl *gomock.Controller) *MockGalleriesClientAPI {
	mock := &MockGalleriesClientAPI{ctrl: ctrl}
	mock.recorder = &MockGalleriesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGalleriesClientAPI) EXPECT() *MockGalleriesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockGalleriesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, galleryName string, gallery compute.Gallery) (compute.GalleriesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, galleryName, gallery)
	ret0, _ := ret[0].(compute.GalleriesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockGalleriesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, galleryName, gallery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGalleriesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, galleryName, gallery)
}

// Delete mocks base method.
func (m *MockGalleriesClientAPI) Delete(ctx context.Context, resourceGroupName, galleryName string) (compute.GalleriesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, galleryName)
	ret0, _ := ret[0].(compute.GalleriesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGalleriesClientAPIMockRecorder) Delete(ctx, resourceGroupName, galleryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGalleriesClientAPI)(nil).Delete), ctx, resourceGroupName, galleryName)
}

// Get mocks base method.
func (m *MockGalleriesClientAPI) Get(ctx context.Context, resourceGroupName, galleryName string, selectParameter compute.SelectPermissions, expand compute.GalleryExpandParams) (compute.Gallery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, galleryName, selectParameter, expand)
	ret0, _ := ret[0].(compute.Gallery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGalleriesClientAPIMockRecorder) Get(ctx, resourceGroupName, galleryName, selectParameter, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGalleriesClientAPI)(nil).Get), ctx, resourceGroupName, galleryName, selectParameter, expand)
}

// List mocks base method.
func (m *MockGalleriesClientAPI) List(ctx context.Context) (compute.GalleryListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(compute.GalleryListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGalleriesClientAPIMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGalleriesClientAPI)(nil).List), ctx)
}

// ListByResourceGroup mocks base method.
func (m *MockGalleriesClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string) (compute.GalleryListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.GalleryListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockGalleriesClientAPIMockRecorder) ListByResourceGroup(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockGalleriesClientAPI)(nil).ListByResourceGroup), ctx, resourceGroupName)
}

// ListByResourceGroupComplete mocks base method.
func (m *MockGalleriesClientAPI) ListByResourceGroupComplete(ctx context.Context, resourceGroupName string) (compute.GalleryListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.GalleryListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete.
func (mr *MockGalleriesClientAPIMockRecorder) ListByResourceGroupComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockGalleriesClientAPI)(nil).ListByResourceGroupComplete), ctx, resourceGroupName)
}

// ListComplete mocks base method.
func (m *MockGalleriesClientAPI) ListComplete(ctx context.Context) (compute.GalleryListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx)
	ret0, _ := ret[0].(compute.GalleryListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockGalleriesClientAPIMockRecorder) ListComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockGalleriesClientAPI)(nil).ListComplete), ctx)
}

// Update mocks base method.
func (m *MockGalleriesClientAPI) Update(ctx context.Context, resourceGroupName, galleryName string, gallery compute.GalleryUpdate) (compute.GalleriesUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, galleryName, gallery)
	ret0, _ := ret[0].(compute.GalleriesUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGalleriesClientAPIMockRecorder) Update(ctx, resourceGroupName, galleryName, gallery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGalleriesClientAPI)(nil).Update), ctx, resourceGroupName, galleryName, gallery)
}

// MockGalleryImagesClientAPI is a mock of GalleryImagesClientAPI interface.
type MockGalleryImagesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGalleryImagesClientAPIMockRecorder
}

// MockGalleryImagesClientAPIMockRecorder is the mock recorder for MockGalleryImagesClientAPI.
type MockGalleryImagesClientAPIMockRecorder struct {
	mock *MockGalleryImagesClientAPI
}

// NewMockGalleryImagesClientAPI creates a new mock instance.
func NewMockGalleryImagesClientAPI(ctrl *gomock.Controller) *MockGalleryImagesClientAPI {
	mock := &MockGalleryImagesClientAPI{ctrl: ctrl}
	mock.recorder = &MockGalleryImagesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGalleryImagesClientAPI) EXPECT() *MockGalleryImagesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockGalleryImagesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, galleryName, galleryImageName string, galleryImage compute.GalleryImage) (compute.GalleryImagesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, galleryName, galleryImageName, galleryImage)
	ret0, _ := ret[0].(compute.GalleryImagesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockGalleryImagesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, galleryName, galleryImageName, galleryImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGalleryImagesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, galleryName, galleryImageName, galleryImage)
}

// Delete mocks base method.
func (m *MockGalleryImagesClientAPI) Delete(ctx context.Context, resourceGroupName, galleryName, galleryImageName string) (compute.GalleryImagesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, galleryName, galleryImageName)
	ret0, _ := ret[0].(compute.GalleryImagesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGalleryImagesClientAPIMockRecorder) Delete(ctx, resourceGroupName, galleryName, galleryImageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGalleryImagesClientAPI)(nil).Delete), ctx, resourceGroupName, galleryName, galleryImageName)
}

// Get mocks base method.
func (m *MockGalleryImagesClientAPI) Get(ctx context.Context, resourceGroupName, galleryName, galleryImageName string) (compute.GalleryImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, galleryName, galleryImageName)
	ret0, _ := ret[0].(compute.GalleryImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGalleryImagesClientAPIMockRecorder) Get(ctx, resourceGroupName, galleryName, galleryImageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGalleryImagesClientAPI)(nil).Get), ctx, resourceGroupName, galleryName, galleryImageName)
}

// ListByGallery mocks base method.
func (m *MockGalleryImagesClientAPI) ListByGallery(ctx context.Context, resourceGroupName, galleryName string) (compute.GalleryImageListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGallery", ctx, resourceGroupName, galleryName)
	ret0, _ := ret[0].(compute.GalleryImageListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGallery indicates an expected call of ListByGallery.
func (mr *MockGalleryImagesClientAPIMockRecorder) ListByGallery(ctx, resourceGroupName, galleryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGallery", reflect.TypeOf((*MockGalleryImagesClientAPI)(nil).ListByGallery), ctx, resourceGroupName, galleryName)
}

// ListByGalleryComplete mocks base method.
func (m *MockGalleryImagesClientAPI) ListByGalleryComplete(ctx context.Context, resourceGroupName, galleryName string) (compute.GalleryImageListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGalleryComplete", ctx, resourceGroupName, galleryName)
	ret0, _ := ret[0].(compute.GalleryImageListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGalleryComplete indicates an expected call of ListByGalleryComplete.
func (mr *MockGalleryImagesClientAPIMockRecorder) ListByGalleryComplete(ctx, resourceGroupName, galleryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGalleryComplete", reflect.TypeOf((*MockGalleryImagesClientAPI)(nil).ListByGalleryComplete), ctx, resourceGroupName, galleryName)
}

// Update mocks base method.
func (m *MockGalleryImagesClientAPI) Update(ctx context.Context, resourceGroupName, galleryName, galleryImageName string, galleryImage compute.GalleryImageUpdate) (compute.GalleryImagesUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, galleryName, galleryImageName, galleryImage)
	ret0, _ := ret[0].(compute.GalleryImagesUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGalleryImagesClientAPIMockRecorder) Update(ctx, resourceGroupName, galleryName, galleryImageName, galleryImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGalleryImagesClientAPI)(nil).Update), ctx, resourceGroupName, galleryName, galleryImageName, galleryImage)
}

// MockGalleryImageVersionsClientAPI is a mock of GalleryImageVersionsClientAPI interface.
type MockGalleryImageVersionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGalleryImageVersionsClientAPIMockRecorder
}

// MockGalleryImageVersionsClientAPIMockRecorder is the mock recorder for MockGalleryImageVersionsClientAPI.
type MockGalleryImageVersionsClientAPIMockRecorder struct {
	mock *MockGalleryImageVersionsClientAPI
}

// NewMockGalleryImageVersionsClientAPI creates a new mock instance.
func NewMockGalleryImageVersionsClientAPI(ctrl *gomock.Controller) *MockGalleryImageVersionsClientAPI {
	mock := &MockGalleryImageVersionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockGalleryImageVersionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGalleryImageVersionsClientAPI) EXPECT() *MockGalleryImageVersionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockGalleryImageVersionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName string, galleryImageVersion compute.GalleryImageVersion) (compute.GalleryImageVersionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion)
	ret0, _ := ret[0].(compute.GalleryImageVersionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockGalleryImageVersionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGalleryImageVersionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion)
}

// Delete mocks base method.
func (m *MockGalleryImageVersionsClientAPI) Delete(ctx context.Context, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName string) (compute.GalleryImageVersionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName)
	ret0, _ := ret[0].(compute.GalleryImageVersionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGalleryImageVersionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGalleryImageVersionsClientAPI)(nil).Delete), ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName)
}

// Get mocks base method.
func (m *MockGalleryImageVersionsClientAPI) Get(ctx context.Context, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName string, expand compute.ReplicationStatusTypes) (compute.GalleryImageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, expand)
	ret0, _ := ret[0].(compute.GalleryImageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGalleryImageVersionsClientAPIMockRecorder) Get(ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGalleryImageVersionsClientAPI)(nil).Get), ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, expand)
}

// ListByGalleryImage mocks base method.
func (m *MockGalleryImageVersionsClientAPI) ListByGalleryImage(ctx context.Context, resourceGroupName, galleryName, galleryImageName string) (compute.GalleryImageVersionListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGalleryImage", ctx, resourceGroupName, galleryName, galleryImageName)
	ret0, _ := ret[0].(compute.GalleryImageVersionListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGalleryImage indicates an expected call of ListByGalleryImage.
func (mr *MockGalleryImageVersionsClientAPIMockRecorder) ListByGalleryImage(ctx, resourceGroupName, galleryName, galleryImageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGalleryImage", reflect.TypeOf((*MockGalleryImageVersionsClientAPI)(nil).ListByGalleryImage), ctx, resourceGroupName, galleryName, galleryImageName)
}

// ListByGalleryImageComplete mocks base method.
func (m *MockGalleryImageVersionsClientAPI) ListByGalleryImageComplete(ctx context.Context, resourceGroupName, galleryName, galleryImageName string) (compute.GalleryImageVersionListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGalleryImageComplete", ctx, resourceGroupName, galleryName, galleryImageName)
	ret0, _ := ret[0].(compute.GalleryImageVersionListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGalleryImageComplete indicates an expected call of ListByGalleryImageComplete.
func (mr *MockGalleryImageVersionsClientAPIMockRecorder) ListByGalleryImageComplete(ctx, resourceGroupName, galleryName, galleryImageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGalleryImageComplete", reflect.TypeOf((*MockGalleryImageVersionsClientAPI)(nil).ListByGalleryImageComplete), ctx, resourceGroupName, galleryName, galleryImageName)
}

// Update mocks base method.
func (m *MockGalleryImageVersionsClientAPI) Update(ctx context.Context, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName string, galleryImageVersion compute.GalleryImageVersionUpdate) (compute.GalleryImageVersionsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion)
	ret0, _ := ret[0].(compute.GalleryImageVersionsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGalleryImageVersionsClientAPIMockRecorder) Update(ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGalleryImageVersionsClientAPI)(nil).Update), ctx, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion)
}

// MockGalleryApplicationsClientAPI is a mock of GalleryApplicationsClientAPI interface.
type MockGalleryApplicationsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGalleryApplicationsClientAPIMockRecorder
}

// MockGalleryApplicationsClientAPIMockRecorder is the mock recorder for MockGalleryApplicationsClientAPI.
type MockGalleryApplicationsClientAPIMockRecorder struct {
	mock *MockGalleryApplicationsClientAPI
}

// NewMockGalleryApplicationsClientAPI creates a new mock instance.
func NewMockGalleryApplicationsClientAPI(ctrl *gomock.Controller) *MockGalleryApplicationsClientAPI {
	mock := &MockGalleryApplicationsClientAPI{ctrl: ctrl}
	mock.recorder = &MockGalleryApplicationsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGalleryApplicationsClientAPI) EXPECT() *MockGalleryApplicationsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockGalleryApplicationsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName string, galleryApplication compute.GalleryApplication) (compute.GalleryApplicationsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
	ret0, _ := ret[0].(compute.GalleryApplicationsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockGalleryApplicationsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplication interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGalleryApplicationsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
}

// Delete mocks base method.
func (m *MockGalleryApplicationsClientAPI) Delete(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName string) (compute.GalleryApplicationsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, galleryName, galleryApplicationName)
	ret0, _ := ret[0].(compute.GalleryApplicationsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGalleryApplicationsClientAPIMockRecorder) Delete(ctx, resourceGroupName, galleryName, galleryApplicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGalleryApplicationsClientAPI)(nil).Delete), ctx, resourceGroupName, galleryName, galleryApplicationName)
}

// Get mocks base method.
func (m *MockGalleryApplicationsClientAPI) Get(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName string) (compute.GalleryApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, galleryName, galleryApplicationName)
	ret0, _ := ret[0].(compute.GalleryApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGalleryApplicationsClientAPIMockRecorder) Get(ctx, resourceGroupName, galleryName, galleryApplicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGalleryApplicationsClientAPI)(nil).Get), ctx, resourceGroupName, galleryName, galleryApplicationName)
}

// ListByGallery mocks base method.
func (m *MockGalleryApplicationsClientAPI) ListByGallery(ctx context.Context, resourceGroupName, galleryName string) (compute.GalleryApplicationListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGallery", ctx, resourceGroupName, galleryName)
	ret0, _ := ret[0].(compute.GalleryApplicationListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGallery indicates an expected call of ListByGallery.
func (mr *MockGalleryApplicationsClientAPIMockRecorder) ListByGallery(ctx, resourceGroupName, galleryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGallery", reflect.TypeOf((*MockGalleryApplicationsClientAPI)(nil).ListByGallery), ctx, resourceGroupName, galleryName)
}

// ListByGalleryComplete mocks base method.
func (m *MockGalleryApplicationsClientAPI) ListByGalleryComplete(ctx context.Context, resourceGroupName, galleryName string) (compute.GalleryApplicationListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGalleryComplete", ctx, resourceGroupName, galleryName)
	ret0, _ := ret[0].(compute.GalleryApplicationListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGalleryComplete indicates an expected call of ListByGalleryComplete.
func (mr *MockGalleryApplicationsClientAPIMockRecorder) ListByGalleryComplete(ctx, resourceGroupName, galleryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGalleryComplete", reflect.TypeOf((*MockGalleryApplicationsClientAPI)(nil).ListByGalleryComplete), ctx, resourceGroupName, galleryName)
}

// Update mocks base method.
func (m *MockGalleryApplicationsClientAPI) Update(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName string, galleryApplication compute.GalleryApplicationUpdate) (compute.GalleryApplicationsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
	ret0, _ := ret[0].(compute.GalleryApplicationsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGalleryApplicationsClientAPIMockRecorder) Update(ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplication interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGalleryApplicationsClientAPI)(nil).Update), ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
}

// MockGalleryApplicationVersionsClientAPI is a mock of GalleryApplicationVersionsClientAPI interface.
type MockGalleryApplicationVersionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGalleryApplicationVersionsClientAPIMockRecorder
}

// MockGalleryApplicationVersionsClientAPIMockRecorder is the mock recorder for MockGalleryApplicationVersionsClientAPI.
type MockGalleryApplicationVersionsClientAPIMockRecorder struct {
	mock *MockGalleryApplicationVersionsClientAPI
}

// NewMockGalleryApplicationVersionsClientAPI creates a new mock instance.
func NewMockGalleryApplicationVersionsClientAPI(ctrl *gomock.Controller) *MockGalleryApplicationVersionsClientAPI {
	mock := &MockGalleryApplicationVersionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockGalleryApplicationVersionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGalleryApplicationVersionsClientAPI) EXPECT() *MockGalleryApplicationVersionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockGalleryApplicationVersionsClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName string, galleryApplicationVersion compute.GalleryApplicationVersion) (compute.GalleryApplicationVersionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion)
	ret0, _ := ret[0].(compute.GalleryApplicationVersionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockGalleryApplicationVersionsClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGalleryApplicationVersionsClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion)
}

// Delete mocks base method.
func (m *MockGalleryApplicationVersionsClientAPI) Delete(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName string) (compute.GalleryApplicationVersionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName)
	ret0, _ := ret[0].(compute.GalleryApplicationVersionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGalleryApplicationVersionsClientAPIMockRecorder) Delete(ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGalleryApplicationVersionsClientAPI)(nil).Delete), ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName)
}

// Get mocks base method.
func (m *MockGalleryApplicationVersionsClientAPI) Get(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName string, expand compute.ReplicationStatusTypes) (compute.GalleryApplicationVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, expand)
	ret0, _ := ret[0].(compute.GalleryApplicationVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGalleryApplicationVersionsClientAPIMockRecorder) Get(ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGalleryApplicationVersionsClientAPI)(nil).Get), ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, expand)
}

// ListByGalleryApplication mocks base method.
func (m *MockGalleryApplicationVersionsClientAPI) ListByGalleryApplication(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName string) (compute.GalleryApplicationVersionListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGalleryApplication", ctx, resourceGroupName, galleryName, galleryApplicationName)
	ret0, _ := ret[0].(compute.GalleryApplicationVersionListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGalleryApplication indicates an expected call of ListByGalleryApplication.
func (mr *MockGalleryApplicationVersionsClientAPIMockRecorder) ListByGalleryApplication(ctx, resourceGroupName, galleryName, galleryApplicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGalleryApplication", reflect.TypeOf((*MockGalleryApplicationVersionsClientAPI)(nil).ListByGalleryApplication), ctx, resourceGroupName, galleryName, galleryApplicationName)
}

// ListByGalleryApplicationComplete mocks base method.
func (m *MockGalleryApplicationVersionsClientAPI) ListByGalleryApplicationComplete(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName string) (compute.GalleryApplicationVersionListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGalleryApplicationComplete", ctx, resourceGroupName, galleryName, galleryApplicationName)
	ret0, _ := ret[0].(compute.GalleryApplicationVersionListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGalleryApplicationComplete indicates an expected call of ListByGalleryApplicationComplete.
func (mr *MockGalleryApplicationVersionsClientAPIMockRecorder) ListByGalleryApplicationComplete(ctx, resourceGroupName, galleryName, galleryApplicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGalleryApplicationComplete", reflect.TypeOf((*MockGalleryApplicationVersionsClientAPI)(nil).ListByGalleryApplicationComplete), ctx, resourceGroupName, galleryName, galleryApplicationName)
}

// Update mocks base method.
func (m *MockGalleryApplicationVersionsClientAPI) Update(ctx context.Context, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName string, galleryApplicationVersion compute.GalleryApplicationVersionUpdate) (compute.GalleryApplicationVersionsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion)
	ret0, _ := ret[0].(compute.GalleryApplicationVersionsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGalleryApplicationVersionsClientAPIMockRecorder) Update(ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGalleryApplicationVersionsClientAPI)(nil).Update), ctx, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion)
}

// MockGallerySharingProfileClientAPI is a mock of GallerySharingProfileClientAPI interface.
type MockGallerySharingProfileClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGallerySharingProfileClientAPIMockRecorder
}

// MockGallerySharingProfileClientAPIMockRecorder is the mock recorder for MockGallerySharingProfileClientAPI.
type MockGallerySharingProfileClientAPIMockRecorder struct {
	mock *MockGallerySharingProfileClientAPI
}

// NewMockGallerySharingProfileClientAPI creates a new mock instance.
func NewMockGallerySharingProfileClientAPI(ctrl *gomock.Controller) *MockGallerySharingProfileClientAPI {
	mock := &MockGallerySharingProfileClientAPI{ctrl: ctrl}
	mock.recorder = &MockGallerySharingProfileClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGallerySharingProfileClientAPI) EXPECT() *MockGallerySharingProfileClientAPIMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockGallerySharingProfileClientAPI) Update(ctx context.Context, resourceGroupName, galleryName string, sharingUpdate compute.SharingUpdate) (compute.GallerySharingProfileUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, galleryName, sharingUpdate)
	ret0, _ := ret[0].(compute.GallerySharingProfileUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGallerySharingProfileClientAPIMockRecorder) Update(ctx, resourceGroupName, galleryName, sharingUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGallerySharingProfileClientAPI)(nil).Update), ctx, resourceGroupName, galleryName, sharingUpdate)
}

// MockSharedGalleriesClientAPI is a mock of SharedGalleriesClientAPI interface.
type MockSharedGalleriesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSharedGalleriesClientAPIMockRecorder
}

// MockSharedGalleriesClientAPIMockRecorder is the mock recorder for MockSharedGalleriesClientAPI.
type MockSharedGalleriesClientAPIMockRecorder struct {
	mock *MockSharedGalleriesClientAPI
}

// NewMockSharedGalleriesClientAPI creates a new mock instance.
func NewMockSharedGalleriesClientAPI(ctrl *gomock.Controller) *MockSharedGalleriesClientAPI {
	mock := &MockSharedGalleriesClientAPI{ctrl: ctrl}
	mock.recorder = &MockSharedGalleriesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedGalleriesClientAPI) EXPECT() *MockSharedGalleriesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSharedGalleriesClientAPI) Get(ctx context.Context, location, galleryUniqueName string) (compute.SharedGallery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, galleryUniqueName)
	ret0, _ := ret[0].(compute.SharedGallery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSharedGalleriesClientAPIMockRecorder) Get(ctx, location, galleryUniqueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSharedGalleriesClientAPI)(nil).Get), ctx, location, galleryUniqueName)
}

// List mocks base method.
func (m *MockSharedGalleriesClientAPI) List(ctx context.Context, location string, sharedTo compute.SharedToValues) (compute.SharedGalleryListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location, sharedTo)
	ret0, _ := ret[0].(compute.SharedGalleryListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSharedGalleriesClientAPIMockRecorder) List(ctx, location, sharedTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSharedGalleriesClientAPI)(nil).List), ctx, location, sharedTo)
}

// ListComplete mocks base method.
func (m *MockSharedGalleriesClientAPI) ListComplete(ctx context.Context, location string, sharedTo compute.SharedToValues) (compute.SharedGalleryListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location, sharedTo)
	ret0, _ := ret[0].(compute.SharedGalleryListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockSharedGalleriesClientAPIMockRecorder) ListComplete(ctx, location, sharedTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSharedGalleriesClientAPI)(nil).ListComplete), ctx, location, sharedTo)
}

// MockSharedGalleryImagesClientAPI is a mock of SharedGalleryImagesClientAPI interface.
type MockSharedGalleryImagesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSharedGalleryImagesClientAPIMockRecorder
}

// MockSharedGalleryImagesClientAPIMockRecorder is the mock recorder for MockSharedGalleryImagesClientAPI.
type MockSharedGalleryImagesClientAPIMockRecorder struct {
	mock *MockSharedGalleryImagesClientAPI
}

// NewMockSharedGalleryImagesClientAPI creates a new mock instance.
func NewMockSharedGalleryImagesClientAPI(ctrl *gomock.Controller) *MockSharedGalleryImagesClientAPI {
	mock := &MockSharedGalleryImagesClientAPI{ctrl: ctrl}
	mock.recorder = &MockSharedGalleryImagesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedGalleryImagesClientAPI) EXPECT() *MockSharedGalleryImagesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSharedGalleryImagesClientAPI) Get(ctx context.Context, location, galleryUniqueName, galleryImageName string) (compute.SharedGalleryImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, galleryUniqueName, galleryImageName)
	ret0, _ := ret[0].(compute.SharedGalleryImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSharedGalleryImagesClientAPIMockRecorder) Get(ctx, location, galleryUniqueName, galleryImageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSharedGalleryImagesClientAPI)(nil).Get), ctx, location, galleryUniqueName, galleryImageName)
}

// List mocks base method.
func (m *MockSharedGalleryImagesClientAPI) List(ctx context.Context, location, galleryUniqueName string, sharedTo compute.SharedToValues) (compute.SharedGalleryImageListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location, galleryUniqueName, sharedTo)
	ret0, _ := ret[0].(compute.SharedGalleryImageListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSharedGalleryImagesClientAPIMockRecorder) List(ctx, location, galleryUniqueName, sharedTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSharedGalleryImagesClientAPI)(nil).List), ctx, location, galleryUniqueName, sharedTo)
}

// ListComplete mocks base method.
func (m *MockSharedGalleryImagesClientAPI) ListComplete(ctx context.Context, location, galleryUniqueName string, sharedTo compute.SharedToValues) (compute.SharedGalleryImageListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location, galleryUniqueName, sharedTo)
	ret0, _ := ret[0].(compute.SharedGalleryImageListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockSharedGalleryImagesClientAPIMockRecorder) ListComplete(ctx, location, galleryUniqueName, sharedTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSharedGalleryImagesClientAPI)(nil).ListComplete), ctx, location, galleryUniqueName, sharedTo)
}

// MockSharedGalleryImageVersionsClientAPI is a mock of SharedGalleryImageVersionsClientAPI interface.
type MockSharedGalleryImageVersionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSharedGalleryImageVersionsClientAPIMockRecorder
}

// MockSharedGalleryImageVersionsClientAPIMockRecorder is the mock recorder for MockSharedGalleryImageVersionsClientAPI.
type MockSharedGalleryImageVersionsClientAPIMockRecorder struct {
	mock *MockSharedGalleryImageVersionsClientAPI
}

// NewMockSharedGalleryImageVersionsClientAPI creates a new mock instance.
func NewMockSharedGalleryImageVersionsClientAPI(ctrl *gomock.Controller) *MockSharedGalleryImageVersionsClientAPI {
	mock := &MockSharedGalleryImageVersionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockSharedGalleryImageVersionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedGalleryImageVersionsClientAPI) EXPECT() *MockSharedGalleryImageVersionsClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSharedGalleryImageVersionsClientAPI) Get(ctx context.Context, location, galleryUniqueName, galleryImageName, galleryImageVersionName string) (compute.SharedGalleryImageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, galleryUniqueName, galleryImageName, galleryImageVersionName)
	ret0, _ := ret[0].(compute.SharedGalleryImageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSharedGalleryImageVersionsClientAPIMockRecorder) Get(ctx, location, galleryUniqueName, galleryImageName, galleryImageVersionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSharedGalleryImageVersionsClientAPI)(nil).Get), ctx, location, galleryUniqueName, galleryImageName, galleryImageVersionName)
}

// List mocks base method.
func (m *MockSharedGalleryImageVersionsClientAPI) List(ctx context.Context, location, galleryUniqueName, galleryImageName string, sharedTo compute.SharedToValues) (compute.SharedGalleryImageVersionListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location, galleryUniqueName, galleryImageName, sharedTo)
	ret0, _ := ret[0].(compute.SharedGalleryImageVersionListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSharedGalleryImageVersionsClientAPIMockRecorder) List(ctx, location, galleryUniqueName, galleryImageName, sharedTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSharedGalleryImageVersionsClientAPI)(nil).List), ctx, location, galleryUniqueName, galleryImageName, sharedTo)
}

// ListComplete mocks base method.
func (m *MockSharedGalleryImageVersionsClientAPI) ListComplete(ctx context.Context, location, galleryUniqueName, galleryImageName string, sharedTo compute.SharedToValues) (compute.SharedGalleryImageVersionListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, location, galleryUniqueName, galleryImageName, sharedTo)
	ret0, _ := ret[0].(compute.SharedGalleryImageVersionListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockSharedGalleryImageVersionsClientAPIMockRecorder) ListComplete(ctx, location, galleryUniqueName, galleryImageName, sharedTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockSharedGalleryImageVersionsClientAPI)(nil).ListComplete), ctx, location, galleryUniqueName, galleryImageName, sharedTo)
}

// MockCommunityGalleriesClientAPI is a mock of CommunityGalleriesClientAPI interface.
type MockCommunityGalleriesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityGalleriesClientAPIMockRecorder
}

// MockCommunityGalleriesClientAPIMockRecorder is the mock recorder for MockCommunityGalleriesClientAPI.
type MockCommunityGalleriesClientAPIMockRecorder struct {
	mock *MockCommunityGalleriesClientAPI
}

// NewMockCommunityGalleriesClientAPI creates a new mock instance.
func NewMockCommunityGalleriesClientAPI(ctrl *gomock.Controller) *MockCommunityGalleriesClientAPI {
	mock := &MockCommunityGalleriesClientAPI{ctrl: ctrl}
	mock.recorder = &MockCommunityGalleriesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityGalleriesClientAPI) EXPECT() *MockCommunityGalleriesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCommunityGalleriesClientAPI) Get(ctx context.Context, location, publicGalleryName string) (compute.CommunityGallery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, publicGalleryName)
	ret0, _ := ret[0].(compute.CommunityGallery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommunityGalleriesClientAPIMockRecorder) Get(ctx, location, publicGalleryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommunityGalleriesClientAPI)(nil).Get), ctx, location, publicGalleryName)
}

// MockCommunityGalleryImagesClientAPI is a mock of CommunityGalleryImagesClientAPI interface.
type MockCommunityGalleryImagesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityGalleryImagesClientAPIMockRecorder
}

// MockCommunityGalleryImagesClientAPIMockRecorder is the mock recorder for MockCommunityGalleryImagesClientAPI.
type MockCommunityGalleryImagesClientAPIMockRecorder struct {
	mock *MockCommunityGalleryImagesClientAPI
}

// NewMockCommunityGalleryImagesClientAPI creates a new mock instance.
func NewMockCommunityGalleryImagesClientAPI(ctrl *gomock.Controller) *MockCommunityGalleryImagesClientAPI {
	mock := &MockCommunityGalleryImagesClientAPI{ctrl: ctrl}
	mock.recorder = &MockCommunityGalleryImagesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityGalleryImagesClientAPI) EXPECT() *MockCommunityGalleryImagesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCommunityGalleryImagesClientAPI) Get(ctx context.Context, location, publicGalleryName, galleryImageName string) (compute.CommunityGalleryImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, publicGalleryName, galleryImageName)
	ret0, _ := ret[0].(compute.CommunityGalleryImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommunityGalleryImagesClientAPIMockRecorder) Get(ctx, location, publicGalleryName, galleryImageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommunityGalleryImagesClientAPI)(nil).Get), ctx, location, publicGalleryName, galleryImageName)
}

// MockCommunityGalleryImageVersionsClientAPI is a mock of CommunityGalleryImageVersionsClientAPI interface.
type MockCommunityGalleryImageVersionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityGalleryImageVersionsClientAPIMockRecorder
}

// MockCommunityGalleryImageVersionsClientAPIMockRecorder is the mock recorder for MockCommunityGalleryImageVersionsClientAPI.
type MockCommunityGalleryImageVersionsClientAPIMockRecorder struct {
	mock *MockCommunityGalleryImageVersionsClientAPI
}

// NewMockCommunityGalleryImageVersionsClientAPI creates a new mock instance.
func NewMockCommunityGalleryImageVersionsClientAPI(ctrl *gomock.Controller) *MockCommunityGalleryImageVersionsClientAPI {
	mock := &MockCommunityGalleryImageVersionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockCommunityGalleryImageVersionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityGalleryImageVersionsClientAPI) EXPECT() *MockCommunityGalleryImageVersionsClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCommunityGalleryImageVersionsClientAPI) Get(ctx context.Context, location, publicGalleryName, galleryImageName, galleryImageVersionName string) (compute.CommunityGalleryImageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, location, publicGalleryName, galleryImageName, galleryImageVersionName)
	ret0, _ := ret[0].(compute.CommunityGalleryImageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommunityGalleryImageVersionsClientAPIMockRecorder) Get(ctx, location, publicGalleryName, galleryImageName, galleryImageVersionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommunityGalleryImageVersionsClientAPI)(nil).Get), ctx, location, publicGalleryName, galleryImageName, galleryImageVersionName)
}

// MockCloudServiceRoleInstancesClientAPI is a mock of CloudServiceRoleInstancesClientAPI interface.
type MockCloudServiceRoleInstancesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceRoleInstancesClientAPIMockRecorder
}

// MockCloudServiceRoleInstancesClientAPIMockRecorder is the mock recorder for MockCloudServiceRoleInstancesClientAPI.
type MockCloudServiceRoleInstancesClientAPIMockRecorder struct {
	mock *MockCloudServiceRoleInstancesClientAPI
}

// NewMockCloudServiceRoleInstancesClientAPI creates a new mock instance.
func NewMockCloudServiceRoleInstancesClientAPI(ctrl *gomock.Controller) *MockCloudServiceRoleInstancesClientAPI {
	mock := &MockCloudServiceRoleInstancesClientAPI{ctrl: ctrl}
	mock.recorder = &MockCloudServiceRoleInstancesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServiceRoleInstancesClientAPI) EXPECT() *MockCloudServiceRoleInstancesClientAPIMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) Delete(ctx context.Context, roleInstanceName, resourceGroupName, cloudServiceName string) (compute.CloudServiceRoleInstancesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, roleInstanceName, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceRoleInstancesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) Delete(ctx, roleInstanceName, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).Delete), ctx, roleInstanceName, resourceGroupName, cloudServiceName)
}

// Get mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) Get(ctx context.Context, roleInstanceName, resourceGroupName, cloudServiceName string, expand compute.InstanceViewTypes) (compute.RoleInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, roleInstanceName, resourceGroupName, cloudServiceName, expand)
	ret0, _ := ret[0].(compute.RoleInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) Get(ctx, roleInstanceName, resourceGroupName, cloudServiceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).Get), ctx, roleInstanceName, resourceGroupName, cloudServiceName, expand)
}

// GetInstanceView mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) GetInstanceView(ctx context.Context, roleInstanceName, resourceGroupName, cloudServiceName string) (compute.RoleInstanceInstanceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceView", ctx, roleInstanceName, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.RoleInstanceInstanceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceView indicates an expected call of GetInstanceView.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) GetInstanceView(ctx, roleInstanceName, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceView", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).GetInstanceView), ctx, roleInstanceName, resourceGroupName, cloudServiceName)
}

// GetRemoteDesktopFile mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) GetRemoteDesktopFile(ctx context.Context, roleInstanceName, resourceGroupName, cloudServiceName string) (compute.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteDesktopFile", ctx, roleInstanceName, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteDesktopFile indicates an expected call of GetRemoteDesktopFile.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) GetRemoteDesktopFile(ctx, roleInstanceName, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteDesktopFile", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).GetRemoteDesktopFile), ctx, roleInstanceName, resourceGroupName, cloudServiceName)
}

// List mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) List(ctx context.Context, resourceGroupName, cloudServiceName string, expand compute.InstanceViewTypes) (compute.RoleInstanceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, cloudServiceName, expand)
	ret0, _ := ret[0].(compute.RoleInstanceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) List(ctx, resourceGroupName, cloudServiceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).List), ctx, resourceGroupName, cloudServiceName, expand)
}

// ListComplete mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) ListComplete(ctx context.Context, resourceGroupName, cloudServiceName string, expand compute.InstanceViewTypes) (compute.RoleInstanceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, cloudServiceName, expand)
	ret0, _ := ret[0].(compute.RoleInstanceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, cloudServiceName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).ListComplete), ctx, resourceGroupName, cloudServiceName, expand)
}

// Rebuild mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) Rebuild(ctx context.Context, roleInstanceName, resourceGroupName, cloudServiceName string) (compute.CloudServiceRoleInstancesRebuildFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebuild", ctx, roleInstanceName, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceRoleInstancesRebuildFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rebuild indicates an expected call of Rebuild.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) Rebuild(ctx, roleInstanceName, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebuild", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).Rebuild), ctx, roleInstanceName, resourceGroupName, cloudServiceName)
}

// Reimage mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) Reimage(ctx context.Context, roleInstanceName, resourceGroupName, cloudServiceName string) (compute.CloudServiceRoleInstancesReimageFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", ctx, roleInstanceName, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceRoleInstancesReimageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reimage indicates an expected call of Reimage.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) Reimage(ctx, roleInstanceName, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).Reimage), ctx, roleInstanceName, resourceGroupName, cloudServiceName)
}

// Restart mocks base method.
func (m *MockCloudServiceRoleInstancesClientAPI) Restart(ctx context.Context, roleInstanceName, resourceGroupName, cloudServiceName string) (compute.CloudServiceRoleInstancesRestartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, roleInstanceName, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceRoleInstancesRestartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockCloudServiceRoleInstancesClientAPIMockRecorder) Restart(ctx, roleInstanceName, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockCloudServiceRoleInstancesClientAPI)(nil).Restart), ctx, roleInstanceName, resourceGroupName, cloudServiceName)
}

// MockCloudServiceRolesClientAPI is a mock of CloudServiceRolesClientAPI interface.
type MockCloudServiceRolesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceRolesClientAPIMockRecorder
}

// MockCloudServiceRolesClientAPIMockRecorder is the mock recorder for MockCloudServiceRolesClientAPI.
type MockCloudServiceRolesClientAPIMockRecorder struct {
	mock *MockCloudServiceRolesClientAPI
}

// NewMockCloudServiceRolesClientAPI creates a new mock instance.
func NewMockCloudServiceRolesClientAPI(ctrl *gomock.Controller) *MockCloudServiceRolesClientAPI {
	mock := &MockCloudServiceRolesClientAPI{ctrl: ctrl}
	mock.recorder = &MockCloudServiceRolesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServiceRolesClientAPI) EXPECT() *MockCloudServiceRolesClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCloudServiceRolesClientAPI) Get(ctx context.Context, roleName, resourceGroupName, cloudServiceName string) (compute.CloudServiceRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, roleName, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudServiceRolesClientAPIMockRecorder) Get(ctx, roleName, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudServiceRolesClientAPI)(nil).Get), ctx, roleName, resourceGroupName, cloudServiceName)
}

// List mocks base method.
func (m *MockCloudServiceRolesClientAPI) List(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.CloudServiceRoleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceRoleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCloudServiceRolesClientAPIMockRecorder) List(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudServiceRolesClientAPI)(nil).List), ctx, resourceGroupName, cloudServiceName)
}

// ListComplete mocks base method.
func (m *MockCloudServiceRolesClientAPI) ListComplete(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.CloudServiceRoleListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceRoleListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockCloudServiceRolesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockCloudServiceRolesClientAPI)(nil).ListComplete), ctx, resourceGroupName, cloudServiceName)
}

// MockCloudServicesClientAPI is a mock of CloudServicesClientAPI interface.
type MockCloudServicesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServicesClientAPIMockRecorder
}

// MockCloudServicesClientAPIMockRecorder is the mock recorder for MockCloudServicesClientAPI.
type MockCloudServicesClientAPIMockRecorder struct {
	mock *MockCloudServicesClientAPI
}

// NewMockCloudServicesClientAPI creates a new mock instance.
func NewMockCloudServicesClientAPI(ctrl *gomock.Controller) *MockCloudServicesClientAPI {
	mock := &MockCloudServicesClientAPI{ctrl: ctrl}
	mock.recorder = &MockCloudServicesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServicesClientAPI) EXPECT() *MockCloudServicesClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockCloudServicesClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName, cloudServiceName string, parameters *compute.CloudService) (compute.CloudServicesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, cloudServiceName, parameters)
	ret0, _ := ret[0].(compute.CloudServicesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockCloudServicesClientAPIMockRecorder) CreateOrUpdate(ctx, resourceGroupName, cloudServiceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).CreateOrUpdate), ctx, resourceGroupName, cloudServiceName, parameters)
}

// Delete mocks base method.
func (m *MockCloudServicesClientAPI) Delete(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.CloudServicesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServicesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudServicesClientAPIMockRecorder) Delete(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).Delete), ctx, resourceGroupName, cloudServiceName)
}

// DeleteInstances mocks base method.
func (m *MockCloudServicesClientAPI) DeleteInstances(ctx context.Context, resourceGroupName, cloudServiceName string, parameters *compute.RoleInstances) (compute.CloudServicesDeleteInstancesFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstances", ctx, resourceGroupName, cloudServiceName, parameters)
	ret0, _ := ret[0].(compute.CloudServicesDeleteInstancesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstances indicates an expected call of DeleteInstances.
func (mr *MockCloudServicesClientAPIMockRecorder) DeleteInstances(ctx, resourceGroupName, cloudServiceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstances", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).DeleteInstances), ctx, resourceGroupName, cloudServiceName, parameters)
}

// Get mocks base method.
func (m *MockCloudServicesClientAPI) Get(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.CloudService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudServicesClientAPIMockRecorder) Get(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).Get), ctx, resourceGroupName, cloudServiceName)
}

// GetInstanceView mocks base method.
func (m *MockCloudServicesClientAPI) GetInstanceView(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.CloudServiceInstanceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceView", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServiceInstanceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceView indicates an expected call of GetInstanceView.
func (mr *MockCloudServicesClientAPIMockRecorder) GetInstanceView(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceView", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).GetInstanceView), ctx, resourceGroupName, cloudServiceName)
}

// List mocks base method.
func (m *MockCloudServicesClientAPI) List(ctx context.Context, resourceGroupName string) (compute.CloudServiceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.CloudServiceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCloudServicesClientAPIMockRecorder) List(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).List), ctx, resourceGroupName)
}

// ListAll mocks base method.
func (m *MockCloudServicesClientAPI) ListAll(ctx context.Context) (compute.CloudServiceListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(compute.CloudServiceListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockCloudServicesClientAPIMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).ListAll), ctx)
}

// ListAllComplete mocks base method.
func (m *MockCloudServicesClientAPI) ListAllComplete(ctx context.Context) (compute.CloudServiceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", ctx)
	ret0, _ := ret[0].(compute.CloudServiceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete.
func (mr *MockCloudServicesClientAPIMockRecorder) ListAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).ListAllComplete), ctx)
}

// ListComplete mocks base method.
func (m *MockCloudServicesClientAPI) ListComplete(ctx context.Context, resourceGroupName string) (compute.CloudServiceListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].(compute.CloudServiceListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockCloudServicesClientAPIMockRecorder) ListComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).ListComplete), ctx, resourceGroupName)
}

// PowerOff mocks base method.
func (m *MockCloudServicesClientAPI) PowerOff(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.CloudServicesPowerOffFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServicesPowerOffFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockCloudServicesClientAPIMockRecorder) PowerOff(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).PowerOff), ctx, resourceGroupName, cloudServiceName)
}

// Rebuild mocks base method.
func (m *MockCloudServicesClientAPI) Rebuild(ctx context.Context, resourceGroupName, cloudServiceName string, parameters *compute.RoleInstances) (compute.CloudServicesRebuildFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebuild", ctx, resourceGroupName, cloudServiceName, parameters)
	ret0, _ := ret[0].(compute.CloudServicesRebuildFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rebuild indicates an expected call of Rebuild.
func (mr *MockCloudServicesClientAPIMockRecorder) Rebuild(ctx, resourceGroupName, cloudServiceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebuild", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).Rebuild), ctx, resourceGroupName, cloudServiceName, parameters)
}

// Reimage mocks base method.
func (m *MockCloudServicesClientAPI) Reimage(ctx context.Context, resourceGroupName, cloudServiceName string, parameters *compute.RoleInstances) (compute.CloudServicesReimageFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", ctx, resourceGroupName, cloudServiceName, parameters)
	ret0, _ := ret[0].(compute.CloudServicesReimageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reimage indicates an expected call of Reimage.
func (mr *MockCloudServicesClientAPIMockRecorder) Reimage(ctx, resourceGroupName, cloudServiceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).Reimage), ctx, resourceGroupName, cloudServiceName, parameters)
}

// Restart mocks base method.
func (m *MockCloudServicesClientAPI) Restart(ctx context.Context, resourceGroupName, cloudServiceName string, parameters *compute.RoleInstances) (compute.CloudServicesRestartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, resourceGroupName, cloudServiceName, parameters)
	ret0, _ := ret[0].(compute.CloudServicesRestartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockCloudServicesClientAPIMockRecorder) Restart(ctx, resourceGroupName, cloudServiceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).Restart), ctx, resourceGroupName, cloudServiceName, parameters)
}

// Start mocks base method.
func (m *MockCloudServicesClientAPI) Start(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.CloudServicesStartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.CloudServicesStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockCloudServicesClientAPIMockRecorder) Start(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).Start), ctx, resourceGroupName, cloudServiceName)
}

// Update mocks base method.
func (m *MockCloudServicesClientAPI) Update(ctx context.Context, resourceGroupName, cloudServiceName string, parameters *compute.CloudServiceUpdate) (compute.CloudServicesUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, cloudServiceName, parameters)
	ret0, _ := ret[0].(compute.CloudServicesUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCloudServicesClientAPIMockRecorder) Update(ctx, resourceGroupName, cloudServiceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCloudServicesClientAPI)(nil).Update), ctx, resourceGroupName, cloudServiceName, parameters)
}

// MockCloudServicesUpdateDomainClientAPI is a mock of CloudServicesUpdateDomainClientAPI interface.
type MockCloudServicesUpdateDomainClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServicesUpdateDomainClientAPIMockRecorder
}

// MockCloudServicesUpdateDomainClientAPIMockRecorder is the mock recorder for MockCloudServicesUpdateDomainClientAPI.
type MockCloudServicesUpdateDomainClientAPIMockRecorder struct {
	mock *MockCloudServicesUpdateDomainClientAPI
}

// NewMockCloudServicesUpdateDomainClientAPI creates a new mock instance.
func NewMockCloudServicesUpdateDomainClientAPI(ctrl *gomock.Controller) *MockCloudServicesUpdateDomainClientAPI {
	mock := &MockCloudServicesUpdateDomainClientAPI{ctrl: ctrl}
	mock.recorder = &MockCloudServicesUpdateDomainClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServicesUpdateDomainClientAPI) EXPECT() *MockCloudServicesUpdateDomainClientAPIMockRecorder {
	return m.recorder
}

// GetUpdateDomain mocks base method.
func (m *MockCloudServicesUpdateDomainClientAPI) GetUpdateDomain(ctx context.Context, resourceGroupName, cloudServiceName string, updateDomain int32) (compute.UpdateDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateDomain", ctx, resourceGroupName, cloudServiceName, updateDomain)
	ret0, _ := ret[0].(compute.UpdateDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateDomain indicates an expected call of GetUpdateDomain.
func (mr *MockCloudServicesUpdateDomainClientAPIMockRecorder) GetUpdateDomain(ctx, resourceGroupName, cloudServiceName, updateDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateDomain", reflect.TypeOf((*MockCloudServicesUpdateDomainClientAPI)(nil).GetUpdateDomain), ctx, resourceGroupName, cloudServiceName, updateDomain)
}

// ListUpdateDomains mocks base method.
func (m *MockCloudServicesUpdateDomainClientAPI) ListUpdateDomains(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.UpdateDomainListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUpdateDomains", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.UpdateDomainListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUpdateDomains indicates an expected call of ListUpdateDomains.
func (mr *MockCloudServicesUpdateDomainClientAPIMockRecorder) ListUpdateDomains(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUpdateDomains", reflect.TypeOf((*MockCloudServicesUpdateDomainClientAPI)(nil).ListUpdateDomains), ctx, resourceGroupName, cloudServiceName)
}

// ListUpdateDomainsComplete mocks base method.
func (m *MockCloudServicesUpdateDomainClientAPI) ListUpdateDomainsComplete(ctx context.Context, resourceGroupName, cloudServiceName string) (compute.UpdateDomainListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUpdateDomainsComplete", ctx, resourceGroupName, cloudServiceName)
	ret0, _ := ret[0].(compute.UpdateDomainListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUpdateDomainsComplete indicates an expected call of ListUpdateDomainsComplete.
func (mr *MockCloudServicesUpdateDomainClientAPIMockRecorder) ListUpdateDomainsComplete(ctx, resourceGroupName, cloudServiceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUpdateDomainsComplete", reflect.TypeOf((*MockCloudServicesUpdateDomainClientAPI)(nil).ListUpdateDomainsComplete), ctx, resourceGroupName, cloudServiceName)
}

// WalkUpdateDomain mocks base method.
func (m *MockCloudServicesUpdateDomainClientAPI) WalkUpdateDomain(ctx context.Context, resourceGroupName, cloudServiceName string, updateDomain int32, parameters *compute.UpdateDomain) (compute.CloudServicesUpdateDomainWalkUpdateDomainFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkUpdateDomain", ctx, resourceGroupName, cloudServiceName, updateDomain, parameters)
	ret0, _ := ret[0].(compute.CloudServicesUpdateDomainWalkUpdateDomainFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalkUpdateDomain indicates an expected call of WalkUpdateDomain.
func (mr *MockCloudServicesUpdateDomainClientAPIMockRecorder) WalkUpdateDomain(ctx, resourceGroupName, cloudServiceName, updateDomain, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkUpdateDomain", reflect.TypeOf((*MockCloudServicesUpdateDomainClientAPI)(nil).WalkUpdateDomain), ctx, resourceGroupName, cloudServiceName, updateDomain, parameters)
}

// MockCloudServiceOperatingSystemsClientAPI is a mock of CloudServiceOperatingSystemsClientAPI interface.
type MockCloudServiceOperatingSystemsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceOperatingSystemsClientAPIMockRecorder
}

// MockCloudServiceOperatingSystemsClientAPIMockRecorder is the mock recorder for MockCloudServiceOperatingSystemsClientAPI.
type MockCloudServiceOperatingSystemsClientAPIMockRecorder struct {
	mock *MockCloudServiceOperatingSystemsClientAPI
}

// NewMockCloudServiceOperatingSystemsClientAPI creates a new mock instance.
func NewMockCloudServiceOperatingSystemsClientAPI(ctrl *gomock.Controller) *MockCloudServiceOperatingSystemsClientAPI {
	mock := &MockCloudServiceOperatingSystemsClientAPI{ctrl: ctrl}
	mock.recorder = &MockCloudServiceOperatingSystemsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServiceOperatingSystemsClientAPI) EXPECT() *MockCloudServiceOperatingSystemsClientAPIMockRecorder {
	return m.recorder
}

// GetOSFamily mocks base method.
func (m *MockCloudServiceOperatingSystemsClientAPI) GetOSFamily(ctx context.Context, location, osFamilyName string) (compute.OSFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSFamily", ctx, location, osFamilyName)
	ret0, _ := ret[0].(compute.OSFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSFamily indicates an expected call of GetOSFamily.
func (mr *MockCloudServiceOperatingSystemsClientAPIMockRecorder) GetOSFamily(ctx, location, osFamilyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSFamily", reflect.TypeOf((*MockCloudServiceOperatingSystemsClientAPI)(nil).GetOSFamily), ctx, location, osFamilyName)
}

// GetOSVersion mocks base method.
func (m *MockCloudServiceOperatingSystemsClientAPI) GetOSVersion(ctx context.Context, location, osVersionName string) (compute.OSVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSVersion", ctx, location, osVersionName)
	ret0, _ := ret[0].(compute.OSVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSVersion indicates an expected call of GetOSVersion.
func (mr *MockCloudServiceOperatingSystemsClientAPIMockRecorder) GetOSVersion(ctx, location, osVersionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSVersion", reflect.TypeOf((*MockCloudServiceOperatingSystemsClientAPI)(nil).GetOSVersion), ctx, location, osVersionName)
}

// ListOSFamilies mocks base method.
func (m *MockCloudServiceOperatingSystemsClientAPI) ListOSFamilies(ctx context.Context, location string) (compute.OSFamilyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOSFamilies", ctx, location)
	ret0, _ := ret[0].(compute.OSFamilyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOSFamilies indicates an expected call of ListOSFamilies.
func (mr *MockCloudServiceOperatingSystemsClientAPIMockRecorder) ListOSFamilies(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOSFamilies", reflect.TypeOf((*MockCloudServiceOperatingSystemsClientAPI)(nil).ListOSFamilies), ctx, location)
}

// ListOSFamiliesComplete mocks base method.
func (m *MockCloudServiceOperatingSystemsClientAPI) ListOSFamiliesComplete(ctx context.Context, location string) (compute.OSFamilyListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOSFamiliesComplete", ctx, location)
	ret0, _ := ret[0].(compute.OSFamilyListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOSFamiliesComplete indicates an expected call of ListOSFamiliesComplete.
func (mr *MockCloudServiceOperatingSystemsClientAPIMockRecorder) ListOSFamiliesComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOSFamiliesComplete", reflect.TypeOf((*MockCloudServiceOperatingSystemsClientAPI)(nil).ListOSFamiliesComplete), ctx, location)
}

// ListOSVersions mocks base method.
func (m *MockCloudServiceOperatingSystemsClientAPI) ListOSVersions(ctx context.Context, location string) (compute.OSVersionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOSVersions", ctx, location)
	ret0, _ := ret[0].(compute.OSVersionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOSVersions indicates an expected call of ListOSVersions.
func (mr *MockCloudServiceOperatingSystemsClientAPIMockRecorder) ListOSVersions(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOSVersions", reflect.TypeOf((*MockCloudServiceOperatingSystemsClientAPI)(nil).ListOSVersions), ctx, location)
}

// ListOSVersionsComplete mocks base method.
func (m *MockCloudServiceOperatingSystemsClientAPI) ListOSVersionsComplete(ctx context.Context, location string) (compute.OSVersionListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOSVersionsComplete", ctx, location)
	ret0, _ := ret[0].(compute.OSVersionListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOSVersionsComplete indicates an expected call of ListOSVersionsComplete.
func (mr *MockCloudServiceOperatingSystemsClientAPIMockRecorder) ListOSVersionsComplete(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOSVersionsComplete", reflect.TypeOf((*MockCloudServiceOperatingSystemsClientAPI)(nil).ListOSVersionsComplete), ctx, location)
}
